// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: implant/implantpb/implant.proto

package implantpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Arch int32

const (
	Arch_i686      Arch = 0
	Arch_x86_64    Arch = 1
	Arch_arm       Arch = 2
	Arch_aarch64   Arch = 3
	Arch_mips      Arch = 4
	Arch_powerpc   Arch = 5
	Arch_powerpc64 Arch = 6
	Arch_riscv32   Arch = 7
	Arch_riscv64   Arch = 8
)

// Enum value maps for Arch.
var (
	Arch_name = map[int32]string{
		0: "i686",
		1: "x86_64",
		2: "arm",
		3: "aarch64",
		4: "mips",
		5: "powerpc",
		6: "powerpc64",
		7: "riscv32",
		8: "riscv64",
	}
	Arch_value = map[string]int32{
		"i686":      0,
		"x86_64":    1,
		"arm":       2,
		"aarch64":   3,
		"mips":      4,
		"powerpc":   5,
		"powerpc64": 6,
		"riscv32":   7,
		"riscv64":   8,
	}
)

func (x Arch) Enum() *Arch {
	p := new(Arch)
	*p = x
	return p
}

func (x Arch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Arch) Descriptor() protoreflect.EnumDescriptor {
	return file_implant_implantpb_implant_proto_enumTypes[0].Descriptor()
}

func (Arch) Type() protoreflect.EnumType {
	return &file_implant_implantpb_implant_proto_enumTypes[0]
}

func (x Arch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Arch.Descriptor instead.
func (Arch) EnumDescriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{0}
}

// implant call and back data
type Spite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TaskId  uint32  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Async   bool    `protobuf:"varint,3,opt,name=async,proto3" json:"async,omitempty"`
	Timeout uint64  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Error   uint32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	Status  *Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to Body:
	//	*Spite_Empty
	//	*Spite_Block
	//	*Spite_Ack
	//	*Spite_Task
	//	*Spite_Sysinfo
	//	*Spite_Register
	//	*Spite_Ping
	//	*Spite_Suicide
	//	*Spite_Request
	//	*Spite_Response
	//	*Spite_ExecuteBinary
	//	*Spite_BinaryResponse
	//	*Spite_LoadModule
	//	*Spite_Modules
	//	*Spite_LoadAddon
	//	*Spite_Addons
	//	*Spite_ExecuteAddon
	//	*Spite_LsResponse
	//	*Spite_ChownRequest
	//	*Spite_ExecRequest
	//	*Spite_ExecResponse
	//	*Spite_UploadRequest
	//	*Spite_DownloadRequest
	//	*Spite_DownloadResponse
	//	*Spite_NetstatResponse
	//	*Spite_PsResponse
	//	*Spite_BypassRequest
	//	*Spite_RegistryRequest
	//	*Spite_RegistryWriteRequest
	//	*Spite_IfconfigResponse
	//	*Spite_CurlRequest
	//	*Spite_ExecuteCommand
	Body isSpite_Body `protobuf_oneof:"body"`
}

func (x *Spite) Reset() {
	*x = Spite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spite) ProtoMessage() {}

func (x *Spite) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spite.ProtoReflect.Descriptor instead.
func (*Spite) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{1}
}

func (x *Spite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spite) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Spite) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

func (x *Spite) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Spite) GetError() uint32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Spite) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Spite) GetBody() isSpite_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Spite) GetEmpty() *Empty {
	if x, ok := x.GetBody().(*Spite_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Spite) GetBlock() *Block {
	if x, ok := x.GetBody().(*Spite_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Spite) GetAck() *ACK {
	if x, ok := x.GetBody().(*Spite_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *Spite) GetTask() *ImplantTask {
	if x, ok := x.GetBody().(*Spite_Task); ok {
		return x.Task
	}
	return nil
}

func (x *Spite) GetSysinfo() *SysInfo {
	if x, ok := x.GetBody().(*Spite_Sysinfo); ok {
		return x.Sysinfo
	}
	return nil
}

func (x *Spite) GetRegister() *Register {
	if x, ok := x.GetBody().(*Spite_Register); ok {
		return x.Register
	}
	return nil
}

func (x *Spite) GetPing() *Ping {
	if x, ok := x.GetBody().(*Spite_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Spite) GetSuicide() *Suicide {
	if x, ok := x.GetBody().(*Spite_Suicide); ok {
		return x.Suicide
	}
	return nil
}

func (x *Spite) GetRequest() *Request {
	if x, ok := x.GetBody().(*Spite_Request); ok {
		return x.Request
	}
	return nil
}

func (x *Spite) GetResponse() *Response {
	if x, ok := x.GetBody().(*Spite_Response); ok {
		return x.Response
	}
	return nil
}

func (x *Spite) GetExecuteBinary() *ExecuteBinary {
	if x, ok := x.GetBody().(*Spite_ExecuteBinary); ok {
		return x.ExecuteBinary
	}
	return nil
}

func (x *Spite) GetBinaryResponse() *BinaryResponse {
	if x, ok := x.GetBody().(*Spite_BinaryResponse); ok {
		return x.BinaryResponse
	}
	return nil
}

func (x *Spite) GetLoadModule() *LoadModule {
	if x, ok := x.GetBody().(*Spite_LoadModule); ok {
		return x.LoadModule
	}
	return nil
}

func (x *Spite) GetModules() *Modules {
	if x, ok := x.GetBody().(*Spite_Modules); ok {
		return x.Modules
	}
	return nil
}

func (x *Spite) GetLoadAddon() *LoadAddon {
	if x, ok := x.GetBody().(*Spite_LoadAddon); ok {
		return x.LoadAddon
	}
	return nil
}

func (x *Spite) GetAddons() *Addons {
	if x, ok := x.GetBody().(*Spite_Addons); ok {
		return x.Addons
	}
	return nil
}

func (x *Spite) GetExecuteAddon() *ExecuteAddon {
	if x, ok := x.GetBody().(*Spite_ExecuteAddon); ok {
		return x.ExecuteAddon
	}
	return nil
}

func (x *Spite) GetLsResponse() *LsResponse {
	if x, ok := x.GetBody().(*Spite_LsResponse); ok {
		return x.LsResponse
	}
	return nil
}

func (x *Spite) GetChownRequest() *ChownRequest {
	if x, ok := x.GetBody().(*Spite_ChownRequest); ok {
		return x.ChownRequest
	}
	return nil
}

func (x *Spite) GetExecRequest() *ExecRequest {
	if x, ok := x.GetBody().(*Spite_ExecRequest); ok {
		return x.ExecRequest
	}
	return nil
}

func (x *Spite) GetExecResponse() *ExecResponse {
	if x, ok := x.GetBody().(*Spite_ExecResponse); ok {
		return x.ExecResponse
	}
	return nil
}

func (x *Spite) GetUploadRequest() *UploadRequest {
	if x, ok := x.GetBody().(*Spite_UploadRequest); ok {
		return x.UploadRequest
	}
	return nil
}

func (x *Spite) GetDownloadRequest() *DownloadRequest {
	if x, ok := x.GetBody().(*Spite_DownloadRequest); ok {
		return x.DownloadRequest
	}
	return nil
}

func (x *Spite) GetDownloadResponse() *DownloadResponse {
	if x, ok := x.GetBody().(*Spite_DownloadResponse); ok {
		return x.DownloadResponse
	}
	return nil
}

func (x *Spite) GetNetstatResponse() *NetstatResponse {
	if x, ok := x.GetBody().(*Spite_NetstatResponse); ok {
		return x.NetstatResponse
	}
	return nil
}

func (x *Spite) GetPsResponse() *PsResponse {
	if x, ok := x.GetBody().(*Spite_PsResponse); ok {
		return x.PsResponse
	}
	return nil
}

func (x *Spite) GetBypassRequest() *BypassRequest {
	if x, ok := x.GetBody().(*Spite_BypassRequest); ok {
		return x.BypassRequest
	}
	return nil
}

func (x *Spite) GetRegistryRequest() *RegistryRequest {
	if x, ok := x.GetBody().(*Spite_RegistryRequest); ok {
		return x.RegistryRequest
	}
	return nil
}

func (x *Spite) GetRegistryWriteRequest() *RegistryWriteRequest {
	if x, ok := x.GetBody().(*Spite_RegistryWriteRequest); ok {
		return x.RegistryWriteRequest
	}
	return nil
}

func (x *Spite) GetIfconfigResponse() *IfconfigResponse {
	if x, ok := x.GetBody().(*Spite_IfconfigResponse); ok {
		return x.IfconfigResponse
	}
	return nil
}

func (x *Spite) GetCurlRequest() *CurlRequest {
	if x, ok := x.GetBody().(*Spite_CurlRequest); ok {
		return x.CurlRequest
	}
	return nil
}

func (x *Spite) GetExecuteCommand() *ExecuteCommand {
	if x, ok := x.GetBody().(*Spite_ExecuteCommand); ok {
		return x.ExecuteCommand
	}
	return nil
}

type isSpite_Body interface {
	isSpite_Body()
}

type Spite_Empty struct {
	Empty *Empty `protobuf:"bytes,10,opt,name=empty,proto3,oneof"`
}

type Spite_Block struct {
	Block *Block `protobuf:"bytes,11,opt,name=block,proto3,oneof"`
}

type Spite_Ack struct {
	Ack *ACK `protobuf:"bytes,13,opt,name=ack,proto3,oneof"`
}

type Spite_Task struct {
	Task *ImplantTask `protobuf:"bytes,14,opt,name=task,proto3,oneof"`
}

type Spite_Sysinfo struct {
	Sysinfo *SysInfo `protobuf:"bytes,20,opt,name=sysinfo,proto3,oneof"`
}

type Spite_Register struct {
	Register *Register `protobuf:"bytes,21,opt,name=register,proto3,oneof"`
}

type Spite_Ping struct {
	Ping *Ping `protobuf:"bytes,22,opt,name=ping,proto3,oneof"`
}

type Spite_Suicide struct {
	Suicide *Suicide `protobuf:"bytes,23,opt,name=suicide,proto3,oneof"`
}

type Spite_Request struct {
	Request *Request `protobuf:"bytes,24,opt,name=request,proto3,oneof"`
}

type Spite_Response struct {
	Response *Response `protobuf:"bytes,25,opt,name=response,proto3,oneof"`
}

type Spite_ExecuteBinary struct {
	ExecuteBinary *ExecuteBinary `protobuf:"bytes,26,opt,name=execute_binary,json=executeBinary,proto3,oneof"`
}

type Spite_BinaryResponse struct {
	BinaryResponse *BinaryResponse `protobuf:"bytes,27,opt,name=binary_response,json=binaryResponse,proto3,oneof"`
}

type Spite_LoadModule struct {
	LoadModule *LoadModule `protobuf:"bytes,31,opt,name=load_module,json=loadModule,proto3,oneof"`
}

type Spite_Modules struct {
	Modules *Modules `protobuf:"bytes,32,opt,name=modules,proto3,oneof"`
}

type Spite_LoadAddon struct {
	LoadAddon *LoadAddon `protobuf:"bytes,35,opt,name=load_addon,json=loadAddon,proto3,oneof"`
}

type Spite_Addons struct {
	Addons *Addons `protobuf:"bytes,36,opt,name=addons,proto3,oneof"`
}

type Spite_ExecuteAddon struct {
	ExecuteAddon *ExecuteAddon `protobuf:"bytes,37,opt,name=execute_addon,json=executeAddon,proto3,oneof"`
}

type Spite_LsResponse struct {
	LsResponse *LsResponse `protobuf:"bytes,101,opt,name=ls_response,json=lsResponse,proto3,oneof"`
}

type Spite_ChownRequest struct {
	ChownRequest *ChownRequest `protobuf:"bytes,102,opt,name=chown_request,json=chownRequest,proto3,oneof"`
}

type Spite_ExecRequest struct {
	ExecRequest *ExecRequest `protobuf:"bytes,104,opt,name=exec_request,json=execRequest,proto3,oneof"`
}

type Spite_ExecResponse struct {
	ExecResponse *ExecResponse `protobuf:"bytes,105,opt,name=exec_response,json=execResponse,proto3,oneof"`
}

type Spite_UploadRequest struct {
	UploadRequest *UploadRequest `protobuf:"bytes,106,opt,name=upload_request,json=uploadRequest,proto3,oneof"`
}

type Spite_DownloadRequest struct {
	DownloadRequest *DownloadRequest `protobuf:"bytes,107,opt,name=download_request,json=downloadRequest,proto3,oneof"`
}

type Spite_DownloadResponse struct {
	DownloadResponse *DownloadResponse `protobuf:"bytes,108,opt,name=download_response,json=downloadResponse,proto3,oneof"`
}

type Spite_NetstatResponse struct {
	NetstatResponse *NetstatResponse `protobuf:"bytes,109,opt,name=netstat_response,json=netstatResponse,proto3,oneof"`
}

type Spite_PsResponse struct {
	PsResponse *PsResponse `protobuf:"bytes,110,opt,name=ps_response,json=psResponse,proto3,oneof"`
}

type Spite_BypassRequest struct {
	BypassRequest *BypassRequest `protobuf:"bytes,111,opt,name=bypass_request,json=bypassRequest,proto3,oneof"`
}

type Spite_RegistryRequest struct {
	RegistryRequest *RegistryRequest `protobuf:"bytes,116,opt,name=registry_request,json=registryRequest,proto3,oneof"`
}

type Spite_RegistryWriteRequest struct {
	RegistryWriteRequest *RegistryWriteRequest `protobuf:"bytes,117,opt,name=registry_write_request,json=registryWriteRequest,proto3,oneof"`
}

type Spite_IfconfigResponse struct {
	IfconfigResponse *IfconfigResponse `protobuf:"bytes,118,opt,name=ifconfig_response,json=ifconfigResponse,proto3,oneof"`
}

type Spite_CurlRequest struct {
	CurlRequest *CurlRequest `protobuf:"bytes,119,opt,name=curl_request,json=curlRequest,proto3,oneof"`
}

type Spite_ExecuteCommand struct {
	ExecuteCommand *ExecuteCommand `protobuf:"bytes,123,opt,name=execute_command,json=executeCommand,proto3,oneof"`
}

func (*Spite_Empty) isSpite_Body() {}

func (*Spite_Block) isSpite_Body() {}

func (*Spite_Ack) isSpite_Body() {}

func (*Spite_Task) isSpite_Body() {}

func (*Spite_Sysinfo) isSpite_Body() {}

func (*Spite_Register) isSpite_Body() {}

func (*Spite_Ping) isSpite_Body() {}

func (*Spite_Suicide) isSpite_Body() {}

func (*Spite_Request) isSpite_Body() {}

func (*Spite_Response) isSpite_Body() {}

func (*Spite_ExecuteBinary) isSpite_Body() {}

func (*Spite_BinaryResponse) isSpite_Body() {}

func (*Spite_LoadModule) isSpite_Body() {}

func (*Spite_Modules) isSpite_Body() {}

func (*Spite_LoadAddon) isSpite_Body() {}

func (*Spite_Addons) isSpite_Body() {}

func (*Spite_ExecuteAddon) isSpite_Body() {}

func (*Spite_LsResponse) isSpite_Body() {}

func (*Spite_ChownRequest) isSpite_Body() {}

func (*Spite_ExecRequest) isSpite_Body() {}

func (*Spite_ExecResponse) isSpite_Body() {}

func (*Spite_UploadRequest) isSpite_Body() {}

func (*Spite_DownloadRequest) isSpite_Body() {}

func (*Spite_DownloadResponse) isSpite_Body() {}

func (*Spite_NetstatResponse) isSpite_Body() {}

func (*Spite_PsResponse) isSpite_Body() {}

func (*Spite_BypassRequest) isSpite_Body() {}

func (*Spite_RegistryRequest) isSpite_Body() {}

func (*Spite_RegistryWriteRequest) isSpite_Body() {}

func (*Spite_IfconfigResponse) isSpite_Body() {}

func (*Spite_CurlRequest) isSpite_Body() {}

func (*Spite_ExecuteCommand) isSpite_Body() {}

type Spites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spites []*Spite `protobuf:"bytes,1,rep,name=spites,proto3" json:"spites,omitempty"`
}

func (x *Spites) Reset() {
	*x = Spites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spites) ProtoMessage() {}

func (x *Spites) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spites.ProtoReflect.Descriptor instead.
func (*Spites) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{2}
}

func (x *Spites) GetSpites() []*Spite {
	if x != nil {
		return x.Spites
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` // unexcept error
	Error  string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`    //std err
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{3}
}

func (x *Status) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Status) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{4}
}

func (x *Ping) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Proxy   string   `protobuf:"bytes,2,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Module  []string `protobuf:"bytes,3,rep,name=module,proto3" json:"module,omitempty"`
	Addon   *Addons  `protobuf:"bytes,4,opt,name=addon,proto3" json:"addon,omitempty"`
	Timer   *Timer   `protobuf:"bytes,5,opt,name=timer,proto3" json:"timer,omitempty"`
	Sysinfo *SysInfo `protobuf:"bytes,11,opt,name=sysinfo,proto3" json:"sysinfo,omitempty"`
}

func (x *Register) Reset() {
	*x = Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Register) ProtoMessage() {}

func (x *Register) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Register.ProtoReflect.Descriptor instead.
func (*Register) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{5}
}

func (x *Register) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Register) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *Register) GetModule() []string {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *Register) GetAddon() *Addons {
	if x != nil {
		return x.Addon
	}
	return nil
}

func (x *Register) GetTimer() *Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *Register) GetSysinfo() *SysInfo {
	if x != nil {
		return x.Sysinfo
	}
	return nil
}

type SysInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath string   `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	Workdir  string   `protobuf:"bytes,2,opt,name=workdir,proto3" json:"workdir,omitempty"`
	Os       *Os      `protobuf:"bytes,11,opt,name=os,proto3" json:"os,omitempty"`
	Process  *Process `protobuf:"bytes,12,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *SysInfo) Reset() {
	*x = SysInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysInfo) ProtoMessage() {}

func (x *SysInfo) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysInfo.ProtoReflect.Descriptor instead.
func (*SysInfo) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{6}
}

func (x *SysInfo) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *SysInfo) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

func (x *SysInfo) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *SysInfo) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type Suicide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Suicide) Reset() {
	*x = Suicide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suicide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suicide) ProtoMessage() {}

func (x *Suicide) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suicide.ProtoReflect.Descriptor instead.
func (*Suicide) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{7}
}

func (x *Suicide) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Suicide) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// common empty request
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input  string            `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Args   []string          `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Params map[string]string `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{8}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Request) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Request) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Request) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output string            `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Error  string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Kv     map[string]string `protobuf:"bytes,3,rep,name=kv,proto3" json:"kv,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{9}
}

func (x *Response) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetKv() map[string]string {
	if x != nil {
		return x.Kv
	}
	return nil
}

type BypassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ETW      bool `protobuf:"varint,1,opt,name=ETW,proto3" json:"ETW,omitempty"`
	AMSI     bool `protobuf:"varint,2,opt,name=AMSI,proto3" json:"AMSI,omitempty"`
	BlockDll bool `protobuf:"varint,3,opt,name=block_dll,json=blockDll,proto3" json:"block_dll,omitempty"`
}

func (x *BypassRequest) Reset() {
	*x = BypassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassRequest) ProtoMessage() {}

func (x *BypassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassRequest.ProtoReflect.Descriptor instead.
func (*BypassRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{10}
}

func (x *BypassRequest) GetETW() bool {
	if x != nil {
		return x.ETW
	}
	return false
}

func (x *BypassRequest) GetAMSI() bool {
	if x != nil {
		return x.AMSI
	}
	return false
}

func (x *BypassRequest) GetBlockDll() bool {
	if x != nil {
		return x.BlockDll
	}
	return false
}

type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac         string   `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{11}
}

func (x *NetInterface) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetInterface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

type SockTabEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddr  string `protobuf:"bytes,1,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	RemoteAddr string `protobuf:"bytes,2,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	SkState    string `protobuf:"bytes,3,opt,name=skState,proto3" json:"skState,omitempty"`
	//  uint32 uid = 4;
	Pid      string `protobuf:"bytes,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Protocol string `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *SockTabEntry) Reset() {
	*x = SockTabEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SockTabEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockTabEntry) ProtoMessage() {}

func (x *SockTabEntry) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockTabEntry.ProtoReflect.Descriptor instead.
func (*SockTabEntry) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{12}
}

func (x *SockTabEntry) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *SockTabEntry) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *SockTabEntry) GetSkState() string {
	if x != nil {
		return x.SkState
	}
	return ""
}

func (x *SockTabEntry) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *SockTabEntry) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type NetstatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Socks []*SockTabEntry `protobuf:"bytes,1,rep,name=socks,proto3" json:"socks,omitempty"`
}

func (x *NetstatResponse) Reset() {
	*x = NetstatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetstatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetstatResponse) ProtoMessage() {}

func (x *NetstatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetstatResponse.ProtoReflect.Descriptor instead.
func (*NetstatResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{13}
}

func (x *NetstatResponse) GetSocks() []*SockTabEntry {
	if x != nil {
		return x.Socks
	}
	return nil
}

type ImplantTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Op     string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *ImplantTask) Reset() {
	*x = ImplantTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantTask) ProtoMessage() {}

func (x *ImplantTask) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantTask.ProtoReflect.Descriptor instead.
func (*ImplantTask) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{14}
}

func (x *ImplantTask) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ImplantTask) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	End     bool   `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{15}
}

func (x *Block) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *Block) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Block) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type ACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	End     bool   `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ACK) Reset() {
	*x = ACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACK) ProtoMessage() {}

func (x *ACK) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACK.ProtoReflect.Descriptor instead.
func (*ACK) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{16}
}

func (x *ACK) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ACK) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ACK) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type Os struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // kernel version
	Release  string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"` // release version
	Arch     string `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty"`
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Hostname string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Locale   string `protobuf:"bytes,7,opt,name=locale,proto3" json:"locale,omitempty"` // timezone
}

func (x *Os) Reset() {
	*x = Os{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Os) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Os) ProtoMessage() {}

func (x *Os) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Os.ProtoReflect.Descriptor instead.
func (*Os) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{17}
}

func (x *Os) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Os) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Os) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Os) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Os) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Os) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Os) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pid   uint32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Ppid  uint32 `protobuf:"varint,3,opt,name=ppid,proto3" json:"ppid,omitempty"`
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Arch  string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Path  string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Args  string `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{18}
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *Process) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Process) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Process) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Process) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval    uint64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Jitter      uint64 `protobuf:"varint,2,opt,name=jitter,proto3" json:"jitter,omitempty"`
	Heartbeat   uint64 `protobuf:"varint,3,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	LastCheckin uint64 `protobuf:"varint,4,opt,name=last_checkin,json=lastCheckin,proto3" json:"last_checkin,omitempty"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{19}
}

func (x *Timer) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Timer) GetJitter() uint64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Timer) GetHeartbeat() uint64 {
	if x != nil {
		return x.Heartbeat
	}
	return 0
}

func (x *Timer) GetLastCheckin() uint64 {
	if x != nil {
		return x.LastCheckin
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IsDir   bool   `protobuf:"varint,2,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	ModTime int64  `protobuf:"varint,4,opt,name=ModTime,proto3" json:"ModTime,omitempty"`
	Mode    uint32 `protobuf:"varint,5,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Link    string `protobuf:"bytes,6,opt,name=Link,proto3" json:"Link,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{20}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetModTime() int64 {
	if x != nil {
		return x.ModTime
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type SacrificeProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hidden   bool   `protobuf:"varint,1,opt,name=hidden,proto3" json:"hidden,omitempty"`
	BlockDll bool   `protobuf:"varint,2,opt,name=block_dll,json=blockDll,proto3" json:"block_dll,omitempty"`
	Etw      bool   `protobuf:"varint,3,opt,name=etw,proto3" json:"etw,omitempty"`
	Ppid     uint32 `protobuf:"varint,4,opt,name=ppid,proto3" json:"ppid,omitempty"`
	Argue    string `protobuf:"bytes,5,opt,name=argue,proto3" json:"argue,omitempty"`
}

func (x *SacrificeProcess) Reset() {
	*x = SacrificeProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SacrificeProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SacrificeProcess) ProtoMessage() {}

func (x *SacrificeProcess) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SacrificeProcess.ProtoReflect.Descriptor instead.
func (*SacrificeProcess) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{21}
}

func (x *SacrificeProcess) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *SacrificeProcess) GetBlockDll() bool {
	if x != nil {
		return x.BlockDll
	}
	return false
}

func (x *SacrificeProcess) GetEtw() bool {
	if x != nil {
		return x.Etw
	}
	return false
}

func (x *SacrificeProcess) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *SacrificeProcess) GetArgue() string {
	if x != nil {
		return x.Argue
	}
	return ""
}

type LsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string      `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Exists bool        `protobuf:"varint,2,opt,name=Exists,proto3" json:"Exists,omitempty"`
	Files  []*FileInfo `protobuf:"bytes,3,rep,name=Files,proto3" json:"Files,omitempty"`
}

func (x *LsResponse) Reset() {
	*x = LsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsResponse) ProtoMessage() {}

func (x *LsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsResponse.ProtoReflect.Descriptor instead.
func (*LsResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{22}
}

func (x *LsResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *LsResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type PsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*Process `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *PsResponse) Reset() {
	*x = PsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsResponse) ProtoMessage() {}

func (x *PsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsResponse.ProtoReflect.Descriptor instead.
func (*PsResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{23}
}

func (x *PsResponse) GetProcesses() []*Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Args   []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Output bool     `protobuf:"varint,3,opt,name=output,proto3" json:"output,omitempty"`
	Ppid   uint32   `protobuf:"varint,10,opt,name=ppid,proto3" json:"ppid,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{24}
}

func (x *ExecRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecRequest) GetOutput() bool {
	if x != nil {
		return x.Output
	}
	return false
}

func (x *ExecRequest) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Stdout     []byte `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     []byte `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Pid        uint32 `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{25}
}

func (x *ExecResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ExecResponse) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecResponse) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *ExecResponse) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type BinaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`       // common return, bof BeaconOutput
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // bof BeaconPrintf
	Err     string `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BinaryResponse) Reset() {
	*x = BinaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryResponse) ProtoMessage() {}

func (x *BinaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryResponse.ProtoReflect.Descriptor instead.
func (*BinaryResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{26}
}

func (x *BinaryResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BinaryResponse) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BinaryResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *BinaryResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Modules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *Modules) Reset() {
	*x = Modules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modules) ProtoMessage() {}

func (x *Modules) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modules.ProtoReflect.Descriptor instead.
func (*Modules) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{27}
}

func (x *Modules) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

type Addons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addons []*Addon `protobuf:"bytes,1,rep,name=addons,proto3" json:"addons,omitempty"`
}

func (x *Addons) Reset() {
	*x = Addons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addons) ProtoMessage() {}

func (x *Addons) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addons.ProtoReflect.Descriptor instead.
func (*Addons) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{28}
}

func (x *Addons) GetAddons() []*Addon {
	if x != nil {
		return x.Addons
	}
	return nil
}

type Addon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Depend string `protobuf:"bytes,3,opt,name=depend,proto3" json:"depend,omitempty"`
}

func (x *Addon) Reset() {
	*x = Addon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addon) ProtoMessage() {}

func (x *Addon) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addon.ProtoReflect.Descriptor instead.
func (*Addon) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{29}
}

func (x *Addon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Addon) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Addon) GetDepend() string {
	if x != nil {
		return x.Depend
	}
	return ""
}

type LoadModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle string `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Bin    []byte `protobuf:"bytes,2,opt,name=bin,proto3" json:"bin,omitempty"`
}

func (x *LoadModule) Reset() {
	*x = LoadModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadModule) ProtoMessage() {}

func (x *LoadModule) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadModule.ProtoReflect.Descriptor instead.
func (*LoadModule) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{30}
}

func (x *LoadModule) GetBundle() string {
	if x != nil {
		return x.Bundle
	}
	return ""
}

func (x *LoadModule) GetBin() []byte {
	if x != nil {
		return x.Bin
	}
	return nil
}

type LoadAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Depend string `protobuf:"bytes,3,opt,name=depend,proto3" json:"depend,omitempty"`
	Bin    []byte `protobuf:"bytes,4,opt,name=bin,proto3" json:"bin,omitempty"`
}

func (x *LoadAddon) Reset() {
	*x = LoadAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadAddon) ProtoMessage() {}

func (x *LoadAddon) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadAddon.ProtoReflect.Descriptor instead.
func (*LoadAddon) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{31}
}

func (x *LoadAddon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadAddon) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LoadAddon) GetDepend() string {
	if x != nil {
		return x.Depend
	}
	return ""
}

func (x *LoadAddon) GetBin() []byte {
	if x != nil {
		return x.Bin
	}
	return nil
}

type ExecuteAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addon         string         `protobuf:"bytes,1,opt,name=addon,proto3" json:"addon,omitempty"`
	ExecuteBinary *ExecuteBinary `protobuf:"bytes,2,opt,name=execute_binary,json=executeBinary,proto3" json:"execute_binary,omitempty"`
}

func (x *ExecuteAddon) Reset() {
	*x = ExecuteAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteAddon) ProtoMessage() {}

func (x *ExecuteAddon) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteAddon.ProtoReflect.Descriptor instead.
func (*ExecuteAddon) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{32}
}

func (x *ExecuteAddon) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *ExecuteAddon) GetExecuteBinary() *ExecuteBinary {
	if x != nil {
		return x.ExecuteBinary
	}
	return nil
}

type ExecuteBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bin         []byte            `protobuf:"bytes,2,opt,name=bin,proto3" json:"bin,omitempty"`
	Param       map[string]string `protobuf:"bytes,3,rep,name=param,proto3" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type        string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ProcessName string            `protobuf:"bytes,5,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	Args        []string          `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	EntryPoint  string            `protobuf:"bytes,7,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	Output      bool              `protobuf:"varint,8,opt,name=output,proto3" json:"output,omitempty"`
	Arch        Arch              `protobuf:"varint,9,opt,name=arch,proto3,enum=implantpb.Arch" json:"arch,omitempty"`
	Timeout     uint32            `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Sacrifice   *SacrificeProcess `protobuf:"bytes,11,opt,name=sacrifice,proto3" json:"sacrifice,omitempty"`
}

func (x *ExecuteBinary) Reset() {
	*x = ExecuteBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBinary) ProtoMessage() {}

func (x *ExecuteBinary) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBinary.ProtoReflect.Descriptor instead.
func (*ExecuteBinary) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{33}
}

func (x *ExecuteBinary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteBinary) GetBin() []byte {
	if x != nil {
		return x.Bin
	}
	return nil
}

func (x *ExecuteBinary) GetParam() map[string]string {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *ExecuteBinary) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecuteBinary) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ExecuteBinary) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecuteBinary) GetEntryPoint() string {
	if x != nil {
		return x.EntryPoint
	}
	return ""
}

func (x *ExecuteBinary) GetOutput() bool {
	if x != nil {
		return x.Output
	}
	return false
}

func (x *ExecuteBinary) GetArch() Arch {
	if x != nil {
		return x.Arch
	}
	return Arch_i686
}

func (x *ExecuteBinary) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ExecuteBinary) GetSacrifice() *SacrificeProcess {
	if x != nil {
		return x.Sacrifice
	}
	return nil
}

type ExecuteCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   string            `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Sacrifice *SacrificeProcess `protobuf:"bytes,2,opt,name=sacrifice,proto3" json:"sacrifice,omitempty"`
}

func (x *ExecuteCommand) Reset() {
	*x = ExecuteCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommand) ProtoMessage() {}

func (x *ExecuteCommand) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommand.ProtoReflect.Descriptor instead.
func (*ExecuteCommand) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{34}
}

func (x *ExecuteCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ExecuteCommand) GetSacrifice() *SacrificeProcess {
	if x != nil {
		return x.Sacrifice
	}
	return nil
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Priv   uint32 `protobuf:"varint,3,opt,name=priv,proto3" json:"priv,omitempty"`
	Data   []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Hidden bool   `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{35}
}

func (x *UploadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *UploadRequest) GetPriv() uint32 {
	if x != nil {
		return x.Priv
	}
	return 0
}

func (x *UploadRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadRequest) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BufferSize uint32 `protobuf:"varint,3,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{36}
}

func (x *DownloadRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DownloadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DownloadRequest) GetBufferSize() uint32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

type DownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Size     uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *DownloadResponse) Reset() {
	*x = DownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse) ProtoMessage() {}

func (x *DownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse.ProtoReflect.Descriptor instead.
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{37}
}

func (x *DownloadResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *DownloadResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type CurlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Timeout  int32             `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Method   string            `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Body     []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Header   map[string]string `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hostname string            `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *CurlRequest) Reset() {
	*x = CurlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurlRequest) ProtoMessage() {}

func (x *CurlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurlRequest.ProtoReflect.Descriptor instead.
func (*CurlRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{38}
}

func (x *CurlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CurlRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CurlRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CurlRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CurlRequest) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CurlRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ChownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uid       string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid       string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Recursive bool   `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *ChownRequest) Reset() {
	*x = ChownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChownRequest) ProtoMessage() {}

func (x *ChownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChownRequest.ProtoReflect.Descriptor instead.
func (*ChownRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{39}
}

func (x *ChownRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ChownRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChownRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *ChownRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type IfconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetInterfaces []*NetInterface `protobuf:"bytes,1,rep,name=net_interfaces,json=netInterfaces,proto3" json:"net_interfaces,omitempty"`
}

func (x *IfconfigResponse) Reset() {
	*x = IfconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfconfigResponse) ProtoMessage() {}

func (x *IfconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfconfigResponse.ProtoReflect.Descriptor instead.
func (*IfconfigResponse) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{40}
}

func (x *IfconfigResponse) GetNetInterfaces() []*NetInterface {
	if x != nil {
		return x.NetInterfaces
	}
	return nil
}

type RegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hive string `protobuf:"bytes,1,opt,name=hive,proto3" json:"hive,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RegistryRequest) Reset() {
	*x = RegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryRequest) ProtoMessage() {}

func (x *RegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryRequest.ProtoReflect.Descriptor instead.
func (*RegistryRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{41}
}

func (x *RegistryRequest) GetHive() string {
	if x != nil {
		return x.Hive
	}
	return ""
}

func (x *RegistryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegistryRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RegistryWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hive        string `protobuf:"bytes,1,opt,name=hive,proto3" json:"hive,omitempty"`
	Path        string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	ByteValue   []byte `protobuf:"bytes,6,opt,name=byte_value,json=byteValue,proto3" json:"byte_value,omitempty"`
	DwordValue  uint32 `protobuf:"varint,7,opt,name=dword_value,json=dwordValue,proto3" json:"dword_value,omitempty"`
	QwordValue  uint64 `protobuf:"varint,8,opt,name=qword_value,json=qwordValue,proto3" json:"qword_value,omitempty"`
	Type        uint32 `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *RegistryWriteRequest) Reset() {
	*x = RegistryWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_implant_implantpb_implant_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryWriteRequest) ProtoMessage() {}

func (x *RegistryWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_implant_implantpb_implant_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryWriteRequest.ProtoReflect.Descriptor instead.
func (*RegistryWriteRequest) Descriptor() ([]byte, []int) {
	return file_implant_implantpb_implant_proto_rawDescGZIP(), []int{42}
}

func (x *RegistryWriteRequest) GetHive() string {
	if x != nil {
		return x.Hive
	}
	return ""
}

func (x *RegistryWriteRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegistryWriteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RegistryWriteRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *RegistryWriteRequest) GetByteValue() []byte {
	if x != nil {
		return x.ByteValue
	}
	return nil
}

func (x *RegistryWriteRequest) GetDwordValue() uint32 {
	if x != nil {
		return x.DwordValue
	}
	return 0
}

func (x *RegistryWriteRequest) GetQwordValue() uint64 {
	if x != nil {
		return x.QwordValue
	}
	return 0
}

func (x *RegistryWriteRequest) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

var File_implant_implantpb_implant_proto protoreflect.FileDescriptor

var file_implant_implantpb_implant_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x70, 0x62, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8d, 0x10, 0x0a, 0x05, 0x53, 0x70, 0x69, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x43, 0x4b, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x73, 0x79, 0x73, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x69, 0x63, 0x69,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x68, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x11, 0x69, 0x66, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x66, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x66, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x70, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x69, 0x74,
	0x65, 0x52, 0x06, 0x73, 0x70, 0x69, 0x74, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73,
	0x79, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x4f, 0x73, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x07, 0x53, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9c, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x6b, 0x76,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x02, 0x6b, 0x76, 0x1a, 0x35, 0x0a, 0x07, 0x4b, 0x76, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52,
	0x0a, 0x0d, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x54, 0x57, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x54,
	0x57, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x4d, 0x53, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x41, 0x4d, 0x53, 0x49, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x6c, 0x6c, 0x22, 0x6d, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x40, 0x0a, 0x0f, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x36, 0x0a, 0x0b,
	0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x70, 0x22, 0x4e, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x41, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x02, 0x4f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x7c, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x22, 0x8a, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x49, 0x73, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x6f,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x83, 0x01,
	0x0a, 0x10, 0x53, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x74, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x72, 0x67, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72,
	0x67, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x0a, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x50, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x0c, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x68,
	0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x32, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x22, 0x47, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x22, 0x36, 0x0a, 0x0a, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62,
	0x69, 0x6e, 0x22, 0x5d, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x69,
	0x6e, 0x22, 0x65, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xa8, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x52, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39,
	0x0a, 0x09, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x61,
	0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x09, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x76, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x69, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x42, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x3a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x64, 0x0a, 0x0c, 0x43, 0x68, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x49, 0x66, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xe8, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x71, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x2a, 0x72, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x12, 0x08, 0x0a, 0x04,
	0x69, 0x36, 0x38, 0x36, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x72, 0x6d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x61,
	0x61, 0x72, 0x63, 0x68, 0x36, 0x34, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x69, 0x70, 0x73,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x70, 0x63, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x70, 0x63, 0x36, 0x34, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x72, 0x69, 0x73, 0x63, 0x76, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x72,
	0x69, 0x73, 0x63, 0x76, 0x36, 0x34, 0x10, 0x08, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x6d, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_implant_implantpb_implant_proto_rawDescOnce sync.Once
	file_implant_implantpb_implant_proto_rawDescData = file_implant_implantpb_implant_proto_rawDesc
)

func file_implant_implantpb_implant_proto_rawDescGZIP() []byte {
	file_implant_implantpb_implant_proto_rawDescOnce.Do(func() {
		file_implant_implantpb_implant_proto_rawDescData = protoimpl.X.CompressGZIP(file_implant_implantpb_implant_proto_rawDescData)
	})
	return file_implant_implantpb_implant_proto_rawDescData
}

var file_implant_implantpb_implant_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_implant_implantpb_implant_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_implant_implantpb_implant_proto_goTypes = []interface{}{
	(Arch)(0),                    // 0: implantpb.Arch
	(*Empty)(nil),                // 1: implantpb.Empty
	(*Spite)(nil),                // 2: implantpb.Spite
	(*Spites)(nil),               // 3: implantpb.Spites
	(*Status)(nil),               // 4: implantpb.Status
	(*Ping)(nil),                 // 5: implantpb.Ping
	(*Register)(nil),             // 6: implantpb.Register
	(*SysInfo)(nil),              // 7: implantpb.SysInfo
	(*Suicide)(nil),              // 8: implantpb.Suicide
	(*Request)(nil),              // 9: implantpb.Request
	(*Response)(nil),             // 10: implantpb.Response
	(*BypassRequest)(nil),        // 11: implantpb.BypassRequest
	(*NetInterface)(nil),         // 12: implantpb.NetInterface
	(*SockTabEntry)(nil),         // 13: implantpb.SockTabEntry
	(*NetstatResponse)(nil),      // 14: implantpb.NetstatResponse
	(*ImplantTask)(nil),          // 15: implantpb.ImplantTask
	(*Block)(nil),                // 16: implantpb.Block
	(*ACK)(nil),                  // 17: implantpb.ACK
	(*Os)(nil),                   // 18: implantpb.Os
	(*Process)(nil),              // 19: implantpb.Process
	(*Timer)(nil),                // 20: implantpb.Timer
	(*FileInfo)(nil),             // 21: implantpb.FileInfo
	(*SacrificeProcess)(nil),     // 22: implantpb.SacrificeProcess
	(*LsResponse)(nil),           // 23: implantpb.LsResponse
	(*PsResponse)(nil),           // 24: implantpb.PsResponse
	(*ExecRequest)(nil),          // 25: implantpb.ExecRequest
	(*ExecResponse)(nil),         // 26: implantpb.ExecResponse
	(*BinaryResponse)(nil),       // 27: implantpb.BinaryResponse
	(*Modules)(nil),              // 28: implantpb.Modules
	(*Addons)(nil),               // 29: implantpb.Addons
	(*Addon)(nil),                // 30: implantpb.Addon
	(*LoadModule)(nil),           // 31: implantpb.LoadModule
	(*LoadAddon)(nil),            // 32: implantpb.LoadAddon
	(*ExecuteAddon)(nil),         // 33: implantpb.ExecuteAddon
	(*ExecuteBinary)(nil),        // 34: implantpb.ExecuteBinary
	(*ExecuteCommand)(nil),       // 35: implantpb.ExecuteCommand
	(*UploadRequest)(nil),        // 36: implantpb.UploadRequest
	(*DownloadRequest)(nil),      // 37: implantpb.DownloadRequest
	(*DownloadResponse)(nil),     // 38: implantpb.DownloadResponse
	(*CurlRequest)(nil),          // 39: implantpb.CurlRequest
	(*ChownRequest)(nil),         // 40: implantpb.ChownRequest
	(*IfconfigResponse)(nil),     // 41: implantpb.IfconfigResponse
	(*RegistryRequest)(nil),      // 42: implantpb.RegistryRequest
	(*RegistryWriteRequest)(nil), // 43: implantpb.RegistryWriteRequest
	nil,                          // 44: implantpb.Request.ParamsEntry
	nil,                          // 45: implantpb.Response.KvEntry
	nil,                          // 46: implantpb.ExecuteBinary.ParamEntry
	nil,                          // 47: implantpb.CurlRequest.HeaderEntry
}
var file_implant_implantpb_implant_proto_depIdxs = []int32{
	4,  // 0: implantpb.Spite.status:type_name -> implantpb.Status
	1,  // 1: implantpb.Spite.empty:type_name -> implantpb.Empty
	16, // 2: implantpb.Spite.block:type_name -> implantpb.Block
	17, // 3: implantpb.Spite.ack:type_name -> implantpb.ACK
	15, // 4: implantpb.Spite.task:type_name -> implantpb.ImplantTask
	7,  // 5: implantpb.Spite.sysinfo:type_name -> implantpb.SysInfo
	6,  // 6: implantpb.Spite.register:type_name -> implantpb.Register
	5,  // 7: implantpb.Spite.ping:type_name -> implantpb.Ping
	8,  // 8: implantpb.Spite.suicide:type_name -> implantpb.Suicide
	9,  // 9: implantpb.Spite.request:type_name -> implantpb.Request
	10, // 10: implantpb.Spite.response:type_name -> implantpb.Response
	34, // 11: implantpb.Spite.execute_binary:type_name -> implantpb.ExecuteBinary
	27, // 12: implantpb.Spite.binary_response:type_name -> implantpb.BinaryResponse
	31, // 13: implantpb.Spite.load_module:type_name -> implantpb.LoadModule
	28, // 14: implantpb.Spite.modules:type_name -> implantpb.Modules
	32, // 15: implantpb.Spite.load_addon:type_name -> implantpb.LoadAddon
	29, // 16: implantpb.Spite.addons:type_name -> implantpb.Addons
	33, // 17: implantpb.Spite.execute_addon:type_name -> implantpb.ExecuteAddon
	23, // 18: implantpb.Spite.ls_response:type_name -> implantpb.LsResponse
	40, // 19: implantpb.Spite.chown_request:type_name -> implantpb.ChownRequest
	25, // 20: implantpb.Spite.exec_request:type_name -> implantpb.ExecRequest
	26, // 21: implantpb.Spite.exec_response:type_name -> implantpb.ExecResponse
	36, // 22: implantpb.Spite.upload_request:type_name -> implantpb.UploadRequest
	37, // 23: implantpb.Spite.download_request:type_name -> implantpb.DownloadRequest
	38, // 24: implantpb.Spite.download_response:type_name -> implantpb.DownloadResponse
	14, // 25: implantpb.Spite.netstat_response:type_name -> implantpb.NetstatResponse
	24, // 26: implantpb.Spite.ps_response:type_name -> implantpb.PsResponse
	11, // 27: implantpb.Spite.bypass_request:type_name -> implantpb.BypassRequest
	42, // 28: implantpb.Spite.registry_request:type_name -> implantpb.RegistryRequest
	43, // 29: implantpb.Spite.registry_write_request:type_name -> implantpb.RegistryWriteRequest
	41, // 30: implantpb.Spite.ifconfig_response:type_name -> implantpb.IfconfigResponse
	39, // 31: implantpb.Spite.curl_request:type_name -> implantpb.CurlRequest
	35, // 32: implantpb.Spite.execute_command:type_name -> implantpb.ExecuteCommand
	2,  // 33: implantpb.Spites.spites:type_name -> implantpb.Spite
	29, // 34: implantpb.Register.addon:type_name -> implantpb.Addons
	20, // 35: implantpb.Register.timer:type_name -> implantpb.Timer
	7,  // 36: implantpb.Register.sysinfo:type_name -> implantpb.SysInfo
	18, // 37: implantpb.SysInfo.os:type_name -> implantpb.Os
	19, // 38: implantpb.SysInfo.process:type_name -> implantpb.Process
	44, // 39: implantpb.Request.params:type_name -> implantpb.Request.ParamsEntry
	45, // 40: implantpb.Response.kv:type_name -> implantpb.Response.KvEntry
	13, // 41: implantpb.NetstatResponse.socks:type_name -> implantpb.SockTabEntry
	21, // 42: implantpb.LsResponse.Files:type_name -> implantpb.FileInfo
	19, // 43: implantpb.PsResponse.processes:type_name -> implantpb.Process
	30, // 44: implantpb.Addons.addons:type_name -> implantpb.Addon
	34, // 45: implantpb.ExecuteAddon.execute_binary:type_name -> implantpb.ExecuteBinary
	46, // 46: implantpb.ExecuteBinary.param:type_name -> implantpb.ExecuteBinary.ParamEntry
	0,  // 47: implantpb.ExecuteBinary.arch:type_name -> implantpb.Arch
	22, // 48: implantpb.ExecuteBinary.sacrifice:type_name -> implantpb.SacrificeProcess
	22, // 49: implantpb.ExecuteCommand.sacrifice:type_name -> implantpb.SacrificeProcess
	47, // 50: implantpb.CurlRequest.header:type_name -> implantpb.CurlRequest.HeaderEntry
	12, // 51: implantpb.IfconfigResponse.net_interfaces:type_name -> implantpb.NetInterface
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_implant_implantpb_implant_proto_init() }
func file_implant_implantpb_implant_proto_init() {
	if File_implant_implantpb_implant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_implant_implantpb_implant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suicide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SockTabEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetstatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Os); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SacrificeProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_implant_implantpb_implant_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_implant_implantpb_implant_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Spite_Empty)(nil),
		(*Spite_Block)(nil),
		(*Spite_Ack)(nil),
		(*Spite_Task)(nil),
		(*Spite_Sysinfo)(nil),
		(*Spite_Register)(nil),
		(*Spite_Ping)(nil),
		(*Spite_Suicide)(nil),
		(*Spite_Request)(nil),
		(*Spite_Response)(nil),
		(*Spite_ExecuteBinary)(nil),
		(*Spite_BinaryResponse)(nil),
		(*Spite_LoadModule)(nil),
		(*Spite_Modules)(nil),
		(*Spite_LoadAddon)(nil),
		(*Spite_Addons)(nil),
		(*Spite_ExecuteAddon)(nil),
		(*Spite_LsResponse)(nil),
		(*Spite_ChownRequest)(nil),
		(*Spite_ExecRequest)(nil),
		(*Spite_ExecResponse)(nil),
		(*Spite_UploadRequest)(nil),
		(*Spite_DownloadRequest)(nil),
		(*Spite_DownloadResponse)(nil),
		(*Spite_NetstatResponse)(nil),
		(*Spite_PsResponse)(nil),
		(*Spite_BypassRequest)(nil),
		(*Spite_RegistryRequest)(nil),
		(*Spite_RegistryWriteRequest)(nil),
		(*Spite_IfconfigResponse)(nil),
		(*Spite_CurlRequest)(nil),
		(*Spite_ExecuteCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_implant_implantpb_implant_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_implant_implantpb_implant_proto_goTypes,
		DependencyIndexes: file_implant_implantpb_implant_proto_depIdxs,
		EnumInfos:         file_implant_implantpb_implant_proto_enumTypes,
		MessageInfos:      file_implant_implantpb_implant_proto_msgTypes,
	}.Build()
	File_implant_implantpb_implant_proto = out.File
	file_implant_implantpb_implant_proto_rawDesc = nil
	file_implant_implantpb_implant_proto_goTypes = nil
	file_implant_implantpb_implant_proto_depIdxs = nil
}
