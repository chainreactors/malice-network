// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: services/clientrpc/service.proto

package clientrpc

import (
	context "context"
	clientpb "github.com/chainreactors/malice-network/helper/proto/client/clientpb"
	rootpb "github.com/chainreactors/malice-network/helper/proto/client/rootpb"
	implantpb "github.com/chainreactors/malice-network/helper/proto/implant/implantpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MaliceRPC_LoginClient_FullMethodName             = "/clientrpc.MaliceRPC/LoginClient"
	MaliceRPC_GetBasic_FullMethodName                = "/clientrpc.MaliceRPC/GetBasic"
	MaliceRPC_GetClients_FullMethodName              = "/clientrpc.MaliceRPC/GetClients"
	MaliceRPC_GetSessions_FullMethodName             = "/clientrpc.MaliceRPC/GetSessions"
	MaliceRPC_GetSession_FullMethodName              = "/clientrpc.MaliceRPC/GetSession"
	MaliceRPC_GetSessionHistory_FullMethodName       = "/clientrpc.MaliceRPC/GetSessionHistory"
	MaliceRPC_SessionManage_FullMethodName           = "/clientrpc.MaliceRPC/SessionManage"
	MaliceRPC_GetListeners_FullMethodName            = "/clientrpc.MaliceRPC/GetListeners"
	MaliceRPC_GetPipelines_FullMethodName            = "/clientrpc.MaliceRPC/GetPipelines"
	MaliceRPC_GetJobs_FullMethodName                 = "/clientrpc.MaliceRPC/GetJobs"
	MaliceRPC_GetTasks_FullMethodName                = "/clientrpc.MaliceRPC/GetTasks"
	MaliceRPC_GetTaskContent_FullMethodName          = "/clientrpc.MaliceRPC/GetTaskContent"
	MaliceRPC_GetTaskFiles_FullMethodName            = "/clientrpc.MaliceRPC/GetTaskFiles"
	MaliceRPC_WaitTaskContent_FullMethodName         = "/clientrpc.MaliceRPC/WaitTaskContent"
	MaliceRPC_WaitTaskFinish_FullMethodName          = "/clientrpc.MaliceRPC/WaitTaskFinish"
	MaliceRPC_GetAllTaskContent_FullMethodName       = "/clientrpc.MaliceRPC/GetAllTaskContent"
	MaliceRPC_GetFiles_FullMethodName                = "/clientrpc.MaliceRPC/GetFiles"
	MaliceRPC_Events_FullMethodName                  = "/clientrpc.MaliceRPC/Events"
	MaliceRPC_Broadcast_FullMethodName               = "/clientrpc.MaliceRPC/Broadcast"
	MaliceRPC_Notify_FullMethodName                  = "/clientrpc.MaliceRPC/Notify"
	MaliceRPC_SessionEvent_FullMethodName            = "/clientrpc.MaliceRPC/SessionEvent"
	MaliceRPC_OnHook_FullMethodName                  = "/clientrpc.MaliceRPC/OnHook"
	MaliceRPC_Ping_FullMethodName                    = "/clientrpc.MaliceRPC/Ping"
	MaliceRPC_Sleep_FullMethodName                   = "/clientrpc.MaliceRPC/Sleep"
	MaliceRPC_Suicide_FullMethodName                 = "/clientrpc.MaliceRPC/Suicide"
	MaliceRPC_ListModule_FullMethodName              = "/clientrpc.MaliceRPC/ListModule"
	MaliceRPC_LoadModule_FullMethodName              = "/clientrpc.MaliceRPC/LoadModule"
	MaliceRPC_RefreshModule_FullMethodName           = "/clientrpc.MaliceRPC/RefreshModule"
	MaliceRPC_ListAddon_FullMethodName               = "/clientrpc.MaliceRPC/ListAddon"
	MaliceRPC_LoadAddon_FullMethodName               = "/clientrpc.MaliceRPC/LoadAddon"
	MaliceRPC_ExecuteAddon_FullMethodName            = "/clientrpc.MaliceRPC/ExecuteAddon"
	MaliceRPC_Clear_FullMethodName                   = "/clientrpc.MaliceRPC/Clear"
	MaliceRPC_CancelTask_FullMethodName              = "/clientrpc.MaliceRPC/CancelTask"
	MaliceRPC_Polling_FullMethodName                 = "/clientrpc.MaliceRPC/Polling"
	MaliceRPC_Upload_FullMethodName                  = "/clientrpc.MaliceRPC/Upload"
	MaliceRPC_Download_FullMethodName                = "/clientrpc.MaliceRPC/Download"
	MaliceRPC_Sync_FullMethodName                    = "/clientrpc.MaliceRPC/Sync"
	MaliceRPC_Pwd_FullMethodName                     = "/clientrpc.MaliceRPC/Pwd"
	MaliceRPC_Ls_FullMethodName                      = "/clientrpc.MaliceRPC/Ls"
	MaliceRPC_Cd_FullMethodName                      = "/clientrpc.MaliceRPC/Cd"
	MaliceRPC_Rm_FullMethodName                      = "/clientrpc.MaliceRPC/Rm"
	MaliceRPC_Mv_FullMethodName                      = "/clientrpc.MaliceRPC/Mv"
	MaliceRPC_Cp_FullMethodName                      = "/clientrpc.MaliceRPC/Cp"
	MaliceRPC_Cat_FullMethodName                     = "/clientrpc.MaliceRPC/Cat"
	MaliceRPC_Mkdir_FullMethodName                   = "/clientrpc.MaliceRPC/Mkdir"
	MaliceRPC_Chmod_FullMethodName                   = "/clientrpc.MaliceRPC/Chmod"
	MaliceRPC_Chown_FullMethodName                   = "/clientrpc.MaliceRPC/Chown"
	MaliceRPC_Kill_FullMethodName                    = "/clientrpc.MaliceRPC/Kill"
	MaliceRPC_Ps_FullMethodName                      = "/clientrpc.MaliceRPC/Ps"
	MaliceRPC_Netstat_FullMethodName                 = "/clientrpc.MaliceRPC/Netstat"
	MaliceRPC_Curl_FullMethodName                    = "/clientrpc.MaliceRPC/Curl"
	MaliceRPC_Env_FullMethodName                     = "/clientrpc.MaliceRPC/Env"
	MaliceRPC_SetEnv_FullMethodName                  = "/clientrpc.MaliceRPC/SetEnv"
	MaliceRPC_UnsetEnv_FullMethodName                = "/clientrpc.MaliceRPC/UnsetEnv"
	MaliceRPC_Whoami_FullMethodName                  = "/clientrpc.MaliceRPC/Whoami"
	MaliceRPC_Info_FullMethodName                    = "/clientrpc.MaliceRPC/Info"
	MaliceRPC_Bypass_FullMethodName                  = "/clientrpc.MaliceRPC/Bypass"
	MaliceRPC_RegQuery_FullMethodName                = "/clientrpc.MaliceRPC/RegQuery"
	MaliceRPC_RegAdd_FullMethodName                  = "/clientrpc.MaliceRPC/RegAdd"
	MaliceRPC_RegDelete_FullMethodName               = "/clientrpc.MaliceRPC/RegDelete"
	MaliceRPC_RegListKey_FullMethodName              = "/clientrpc.MaliceRPC/RegListKey"
	MaliceRPC_RegListValue_FullMethodName            = "/clientrpc.MaliceRPC/RegListValue"
	MaliceRPC_ServiceList_FullMethodName             = "/clientrpc.MaliceRPC/ServiceList"
	MaliceRPC_ServiceCreate_FullMethodName           = "/clientrpc.MaliceRPC/ServiceCreate"
	MaliceRPC_ServiceStart_FullMethodName            = "/clientrpc.MaliceRPC/ServiceStart"
	MaliceRPC_ServiceStop_FullMethodName             = "/clientrpc.MaliceRPC/ServiceStop"
	MaliceRPC_ServiceQuery_FullMethodName            = "/clientrpc.MaliceRPC/ServiceQuery"
	MaliceRPC_ServiceDelete_FullMethodName           = "/clientrpc.MaliceRPC/ServiceDelete"
	MaliceRPC_TaskSchdList_FullMethodName            = "/clientrpc.MaliceRPC/TaskSchdList"
	MaliceRPC_TaskSchdCreate_FullMethodName          = "/clientrpc.MaliceRPC/TaskSchdCreate"
	MaliceRPC_TaskSchdStart_FullMethodName           = "/clientrpc.MaliceRPC/TaskSchdStart"
	MaliceRPC_TaskSchdStop_FullMethodName            = "/clientrpc.MaliceRPC/TaskSchdStop"
	MaliceRPC_TaskSchdDelete_FullMethodName          = "/clientrpc.MaliceRPC/TaskSchdDelete"
	MaliceRPC_TaskSchdQuery_FullMethodName           = "/clientrpc.MaliceRPC/TaskSchdQuery"
	MaliceRPC_TaskSchdRun_FullMethodName             = "/clientrpc.MaliceRPC/TaskSchdRun"
	MaliceRPC_WmiQuery_FullMethodName                = "/clientrpc.MaliceRPC/WmiQuery"
	MaliceRPC_WmiExecute_FullMethodName              = "/clientrpc.MaliceRPC/WmiExecute"
	MaliceRPC_Runas_FullMethodName                   = "/clientrpc.MaliceRPC/Runas"
	MaliceRPC_Privs_FullMethodName                   = "/clientrpc.MaliceRPC/Privs"
	MaliceRPC_GetSystem_FullMethodName               = "/clientrpc.MaliceRPC/GetSystem"
	MaliceRPC_PipeUpload_FullMethodName              = "/clientrpc.MaliceRPC/PipeUpload"
	MaliceRPC_PipeRead_FullMethodName                = "/clientrpc.MaliceRPC/PipeRead"
	MaliceRPC_PipeClose_FullMethodName               = "/clientrpc.MaliceRPC/PipeClose"
	MaliceRPC_Execute_FullMethodName                 = "/clientrpc.MaliceRPC/Execute"
	MaliceRPC_ExecuteSpawn_FullMethodName            = "/clientrpc.MaliceRPC/ExecuteSpawn"
	MaliceRPC_ExecuteAssembly_FullMethodName         = "/clientrpc.MaliceRPC/ExecuteAssembly"
	MaliceRPC_ExecutePowerpick_FullMethodName        = "/clientrpc.MaliceRPC/ExecutePowerpick"
	MaliceRPC_ExecuteEXE_FullMethodName              = "/clientrpc.MaliceRPC/ExecuteEXE"
	MaliceRPC_ExecuteDLL_FullMethodName              = "/clientrpc.MaliceRPC/ExecuteDLL"
	MaliceRPC_ExecuteArmory_FullMethodName           = "/clientrpc.MaliceRPC/ExecuteArmory"
	MaliceRPC_ExecuteShellcode_FullMethodName        = "/clientrpc.MaliceRPC/ExecuteShellcode"
	MaliceRPC_ExecuteBof_FullMethodName              = "/clientrpc.MaliceRPC/ExecuteBof"
	MaliceRPC_ExecuteLocal_FullMethodName            = "/clientrpc.MaliceRPC/ExecuteLocal"
	MaliceRPC_EXE2Shellcode_FullMethodName           = "/clientrpc.MaliceRPC/EXE2Shellcode"
	MaliceRPC_DLL2Shellcode_FullMethodName           = "/clientrpc.MaliceRPC/DLL2Shellcode"
	MaliceRPC_ShellcodeEncode_FullMethodName         = "/clientrpc.MaliceRPC/ShellcodeEncode"
	MaliceRPC_ListJobs_FullMethodName                = "/clientrpc.MaliceRPC/ListJobs"
	MaliceRPC_Websites_FullMethodName                = "/clientrpc.MaliceRPC/Websites"
	MaliceRPC_Website_FullMethodName                 = "/clientrpc.MaliceRPC/Website"
	MaliceRPC_WebsiteRemove_FullMethodName           = "/clientrpc.MaliceRPC/WebsiteRemove"
	MaliceRPC_WebsiteAddContent_FullMethodName       = "/clientrpc.MaliceRPC/WebsiteAddContent"
	MaliceRPC_WebsiteUpdateContent_FullMethodName    = "/clientrpc.MaliceRPC/WebsiteUpdateContent"
	MaliceRPC_WebsiteRemoveContent_FullMethodName    = "/clientrpc.MaliceRPC/WebsiteRemoveContent"
	MaliceRPC_NewProfile_FullMethodName              = "/clientrpc.MaliceRPC/NewProfile"
	MaliceRPC_GetProfiles_FullMethodName             = "/clientrpc.MaliceRPC/GetProfiles"
	MaliceRPC_Build_FullMethodName                   = "/clientrpc.MaliceRPC/Build"
	MaliceRPC_BuildLog_FullMethodName                = "/clientrpc.MaliceRPC/BuildLog"
	MaliceRPC_DownloadArtifact_FullMethodName        = "/clientrpc.MaliceRPC/DownloadArtifact"
	MaliceRPC_UploadArtifact_FullMethodName          = "/clientrpc.MaliceRPC/UploadArtifact"
	MaliceRPC_ListArtifact_FullMethodName            = "/clientrpc.MaliceRPC/ListArtifact"
	MaliceRPC_MaleficSRDI_FullMethodName             = "/clientrpc.MaliceRPC/MaleficSRDI"
	MaliceRPC_BuildModules_FullMethodName            = "/clientrpc.MaliceRPC/BuildModules"
	MaliceRPC_TriggerWorkflowDispatch_FullMethodName = "/clientrpc.MaliceRPC/TriggerWorkflowDispatch"
	MaliceRPC_EnableWorkflow_FullMethodName          = "/clientrpc.MaliceRPC/EnableWorkflow"
	MaliceRPC_DisableWorkflow_FullMethodName         = "/clientrpc.MaliceRPC/DisableWorkflow"
	MaliceRPC_ListRepositoryWorkflows_FullMethodName = "/clientrpc.MaliceRPC/ListRepositoryWorkflows"
)

// MaliceRPCClient is the client API for MaliceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaliceRPCClient interface {
	// basic
	LoginClient(ctx context.Context, in *clientpb.LoginReq, opts ...grpc.CallOption) (*clientpb.Client, error)
	GetBasic(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Basic, error)
	GetClients(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Clients, error)
	GetSessions(ctx context.Context, in *clientpb.SessionRequest, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	GetSession(ctx context.Context, in *clientpb.SessionRequest, opts ...grpc.CallOption) (*clientpb.Session, error)
	GetSessionHistory(ctx context.Context, in *clientpb.SessionLog, opts ...grpc.CallOption) (*clientpb.TasksContext, error)
	SessionManage(ctx context.Context, in *clientpb.BasicUpdateSession, opts ...grpc.CallOption) (*clientpb.Empty, error)
	GetListeners(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Listeners, error)
	GetPipelines(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Pipelines, error)
	GetJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error)
	GetTasks(ctx context.Context, in *clientpb.TaskRequest, opts ...grpc.CallOption) (*clientpb.Tasks, error)
	GetTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error)
	GetTaskFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error)
	WaitTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error)
	WaitTaskFinish(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error)
	GetAllTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContexts, error)
	GetFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error)
	// event
	Events(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (MaliceRPC_EventsClient, error)
	Broadcast(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error)
	Notify(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error)
	SessionEvent(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error)
	OnHook(ctx context.Context, in *clientpb.On, opts ...grpc.CallOption) (*clientpb.Empty, error)
	// implant::internal
	Ping(ctx context.Context, in *implantpb.Ping, opts ...grpc.CallOption) (*clientpb.Task, error)
	Sleep(ctx context.Context, in *implantpb.Timer, opts ...grpc.CallOption) (*clientpb.Task, error)
	Suicide(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	ListModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	LoadModule(ctx context.Context, in *implantpb.LoadModule, opts ...grpc.CallOption) (*clientpb.Task, error)
	RefreshModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	ListAddon(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	LoadAddon(ctx context.Context, in *implantpb.LoadAddon, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteAddon(ctx context.Context, in *implantpb.ExecuteAddon, opts ...grpc.CallOption) (*clientpb.Task, error)
	Clear(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	CancelTask(ctx context.Context, in *implantpb.ImplantTask, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::bind
	Polling(ctx context.Context, in *clientpb.Polling, opts ...grpc.CallOption) (*clientpb.Empty, error)
	// implant::file
	Upload(ctx context.Context, in *implantpb.UploadRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Download(ctx context.Context, in *implantpb.DownloadRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Sync(ctx context.Context, in *clientpb.Sync, opts ...grpc.CallOption) (*clientpb.SyncResp, error)
	// implant::fs
	Pwd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Ls(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Cd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Rm(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Mv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Cp(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Cat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Mkdir(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Chmod(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Chown(ctx context.Context, in *implantpb.ChownRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys
	Kill(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Ps(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Netstat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Curl(ctx context.Context, in *implantpb.CurlRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Env(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	SetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	UnsetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Whoami(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Info(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Bypass(ctx context.Context, in *implantpb.BypassRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::reg
	RegQuery(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegAdd(ctx context.Context, in *implantpb.RegistryWriteRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegDelete(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegListKey(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegListValue(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::service
	ServiceList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceCreate(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceStart(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceStop(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceQuery(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceDelete(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::taskschd
	TaskSchdList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdCreate(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdStart(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdStop(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdDelete(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdQuery(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdRun(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys:wmi
	WmiQuery(ctx context.Context, in *implantpb.WmiQueryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	WmiExecute(ctx context.Context, in *implantpb.WmiMethodRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys:token
	Runas(ctx context.Context, in *implantpb.RunAsRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Privs(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	GetSystem(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::pipe
	PipeUpload(ctx context.Context, in *implantpb.PipeRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	PipeRead(ctx context.Context, in *implantpb.PipeRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	PipeClose(ctx context.Context, in *implantpb.PipeRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant:execute
	Execute(ctx context.Context, in *implantpb.ExecRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteSpawn(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteAssembly(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecutePowerpick(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteEXE(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteDLL(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteArmory(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteShellcode(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteBof(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteLocal(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	// shellcode
	EXE2Shellcode(ctx context.Context, in *clientpb.EXE2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error)
	DLL2Shellcode(ctx context.Context, in *clientpb.DLL2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error)
	ShellcodeEncode(ctx context.Context, in *clientpb.ShellcodeEncode, opts ...grpc.CallOption) (*clientpb.Bin, error)
	// jobs
	ListJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Pipelines, error)
	// Websites
	Websites(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error)
	Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Empty, error)
	WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	// generator
	NewProfile(ctx context.Context, in *clientpb.Profile, opts ...grpc.CallOption) (*clientpb.Empty, error)
	GetProfiles(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Profiles, error)
	Build(ctx context.Context, in *clientpb.Generate, opts ...grpc.CallOption) (*clientpb.Builder, error)
	BuildLog(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error)
	DownloadArtifact(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error)
	UploadArtifact(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error)
	ListArtifact(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error)
	MaleficSRDI(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error)
	BuildModules(ctx context.Context, in *clientpb.Generate, opts ...grpc.CallOption) (*clientpb.Builder, error)
	// action
	TriggerWorkflowDispatch(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.Builder, error)
	EnableWorkflow(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.Empty, error)
	DisableWorkflow(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.Empty, error)
	ListRepositoryWorkflows(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.ListWorkflowsResponse, error)
}

type maliceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMaliceRPCClient(cc grpc.ClientConnInterface) MaliceRPCClient {
	return &maliceRPCClient{cc}
}

func (c *maliceRPCClient) LoginClient(ctx context.Context, in *clientpb.LoginReq, opts ...grpc.CallOption) (*clientpb.Client, error) {
	out := new(clientpb.Client)
	err := c.cc.Invoke(ctx, MaliceRPC_LoginClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetBasic(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Basic, error) {
	out := new(clientpb.Basic)
	err := c.cc.Invoke(ctx, MaliceRPC_GetBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetClients(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Clients, error) {
	out := new(clientpb.Clients)
	err := c.cc.Invoke(ctx, MaliceRPC_GetClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSessions(ctx context.Context, in *clientpb.SessionRequest, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, MaliceRPC_GetSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSession(ctx context.Context, in *clientpb.SessionRequest, opts ...grpc.CallOption) (*clientpb.Session, error) {
	out := new(clientpb.Session)
	err := c.cc.Invoke(ctx, MaliceRPC_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSessionHistory(ctx context.Context, in *clientpb.SessionLog, opts ...grpc.CallOption) (*clientpb.TasksContext, error) {
	out := new(clientpb.TasksContext)
	err := c.cc.Invoke(ctx, MaliceRPC_GetSessionHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) SessionManage(ctx context.Context, in *clientpb.BasicUpdateSession, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_SessionManage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetListeners(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Listeners, error) {
	out := new(clientpb.Listeners)
	err := c.cc.Invoke(ctx, MaliceRPC_GetListeners_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetPipelines(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Pipelines, error) {
	out := new(clientpb.Pipelines)
	err := c.cc.Invoke(ctx, MaliceRPC_GetPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error) {
	out := new(clientpb.Jobs)
	err := c.cc.Invoke(ctx, MaliceRPC_GetJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetTasks(ctx context.Context, in *clientpb.TaskRequest, opts ...grpc.CallOption) (*clientpb.Tasks, error) {
	out := new(clientpb.Tasks)
	err := c.cc.Invoke(ctx, MaliceRPC_GetTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error) {
	out := new(clientpb.TaskContext)
	err := c.cc.Invoke(ctx, MaliceRPC_GetTaskContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetTaskFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error) {
	out := new(clientpb.Files)
	err := c.cc.Invoke(ctx, MaliceRPC_GetTaskFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WaitTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error) {
	out := new(clientpb.TaskContext)
	err := c.cc.Invoke(ctx, MaliceRPC_WaitTaskContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WaitTaskFinish(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error) {
	out := new(clientpb.TaskContext)
	err := c.cc.Invoke(ctx, MaliceRPC_WaitTaskFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetAllTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContexts, error) {
	out := new(clientpb.TaskContexts)
	err := c.cc.Invoke(ctx, MaliceRPC_GetAllTaskContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error) {
	out := new(clientpb.Files)
	err := c.cc.Invoke(ctx, MaliceRPC_GetFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Events(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (MaliceRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaliceRPC_ServiceDesc.Streams[0], MaliceRPC_Events_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &maliceRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MaliceRPC_EventsClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type maliceRPCEventsClient struct {
	grpc.ClientStream
}

func (x *maliceRPCEventsClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maliceRPCClient) Broadcast(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_Broadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Notify(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_Notify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) SessionEvent(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_SessionEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) OnHook(ctx context.Context, in *clientpb.On, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_OnHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Ping(ctx context.Context, in *implantpb.Ping, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Sleep(ctx context.Context, in *implantpb.Timer, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Sleep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Suicide(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Suicide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ListModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) LoadModule(ctx context.Context, in *implantpb.LoadModule, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_LoadModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RefreshModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_RefreshModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListAddon(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ListAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) LoadAddon(ctx context.Context, in *implantpb.LoadAddon, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_LoadAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteAddon(ctx context.Context, in *implantpb.ExecuteAddon, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Clear(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Clear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) CancelTask(ctx context.Context, in *implantpb.ImplantTask, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_CancelTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Polling(ctx context.Context, in *clientpb.Polling, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_Polling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Upload(ctx context.Context, in *implantpb.UploadRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Download(ctx context.Context, in *implantpb.DownloadRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Download_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Sync(ctx context.Context, in *clientpb.Sync, opts ...grpc.CallOption) (*clientpb.SyncResp, error) {
	out := new(clientpb.SyncResp)
	err := c.cc.Invoke(ctx, MaliceRPC_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Pwd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Pwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Ls(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Ls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Cd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Cd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Rm(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Rm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Mv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Mv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Cp(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Cp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Cat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Cat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Mkdir(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Mkdir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Chmod(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Chmod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Chown(ctx context.Context, in *implantpb.ChownRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Chown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Kill(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Kill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Ps(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Ps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Netstat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Netstat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Curl(ctx context.Context, in *implantpb.CurlRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Curl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Env(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Env_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) SetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_SetEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) UnsetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_UnsetEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Whoami(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Whoami_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Info(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Bypass(ctx context.Context, in *implantpb.BypassRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Bypass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegQuery(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_RegQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegAdd(ctx context.Context, in *implantpb.RegistryWriteRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_RegAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegDelete(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_RegDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegListKey(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_RegListKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegListValue(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_RegListValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ServiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceCreate(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ServiceCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceStart(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ServiceStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceStop(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ServiceStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceQuery(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ServiceQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceDelete(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ServiceDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdCreate(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdStart(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdStop(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdDelete(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdQuery(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdRun(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_TaskSchdRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WmiQuery(ctx context.Context, in *implantpb.WmiQueryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_WmiQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WmiExecute(ctx context.Context, in *implantpb.WmiMethodRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_WmiExecute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Runas(ctx context.Context, in *implantpb.RunAsRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Runas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Privs(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Privs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSystem(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_GetSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) PipeUpload(ctx context.Context, in *implantpb.PipeRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_PipeUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) PipeRead(ctx context.Context, in *implantpb.PipeRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_PipeRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) PipeClose(ctx context.Context, in *implantpb.PipeRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_PipeClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Execute(ctx context.Context, in *implantpb.ExecRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteSpawn(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteSpawn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteAssembly(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteAssembly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecutePowerpick(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecutePowerpick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteEXE(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteEXE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteDLL(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteDLL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteArmory(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteArmory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteShellcode(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteShellcode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteBof(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteBof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteLocal(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, MaliceRPC_ExecuteLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) EXE2Shellcode(ctx context.Context, in *clientpb.EXE2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error) {
	out := new(clientpb.Bin)
	err := c.cc.Invoke(ctx, MaliceRPC_EXE2Shellcode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) DLL2Shellcode(ctx context.Context, in *clientpb.DLL2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error) {
	out := new(clientpb.Bin)
	err := c.cc.Invoke(ctx, MaliceRPC_DLL2Shellcode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ShellcodeEncode(ctx context.Context, in *clientpb.ShellcodeEncode, opts ...grpc.CallOption) (*clientpb.Bin, error) {
	out := new(clientpb.Bin)
	err := c.cc.Invoke(ctx, MaliceRPC_ShellcodeEncode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Pipelines, error) {
	out := new(clientpb.Pipelines)
	err := c.cc.Invoke(ctx, MaliceRPC_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Websites(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error) {
	out := new(clientpb.Websites)
	err := c.cc.Invoke(ctx, MaliceRPC_Websites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, MaliceRPC_Website_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_WebsiteRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, MaliceRPC_WebsiteAddContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, MaliceRPC_WebsiteUpdateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, MaliceRPC_WebsiteRemoveContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) NewProfile(ctx context.Context, in *clientpb.Profile, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_NewProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetProfiles(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Profiles, error) {
	out := new(clientpb.Profiles)
	err := c.cc.Invoke(ctx, MaliceRPC_GetProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Build(ctx context.Context, in *clientpb.Generate, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_Build_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) BuildLog(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_BuildLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) DownloadArtifact(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_DownloadArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) UploadArtifact(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_UploadArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListArtifact(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error) {
	out := new(clientpb.Builders)
	err := c.cc.Invoke(ctx, MaliceRPC_ListArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) MaleficSRDI(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_MaleficSRDI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) BuildModules(ctx context.Context, in *clientpb.Generate, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_BuildModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TriggerWorkflowDispatch(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.Builder, error) {
	out := new(clientpb.Builder)
	err := c.cc.Invoke(ctx, MaliceRPC_TriggerWorkflowDispatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) EnableWorkflow(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_EnableWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) DisableWorkflow(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, MaliceRPC_DisableWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListRepositoryWorkflows(ctx context.Context, in *clientpb.WorkflowRequest, opts ...grpc.CallOption) (*clientpb.ListWorkflowsResponse, error) {
	out := new(clientpb.ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, MaliceRPC_ListRepositoryWorkflows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaliceRPCServer is the server API for MaliceRPC service.
// All implementations must embed UnimplementedMaliceRPCServer
// for forward compatibility
type MaliceRPCServer interface {
	// basic
	LoginClient(context.Context, *clientpb.LoginReq) (*clientpb.Client, error)
	GetBasic(context.Context, *clientpb.Empty) (*clientpb.Basic, error)
	GetClients(context.Context, *clientpb.Empty) (*clientpb.Clients, error)
	GetSessions(context.Context, *clientpb.SessionRequest) (*clientpb.Sessions, error)
	GetSession(context.Context, *clientpb.SessionRequest) (*clientpb.Session, error)
	GetSessionHistory(context.Context, *clientpb.SessionLog) (*clientpb.TasksContext, error)
	SessionManage(context.Context, *clientpb.BasicUpdateSession) (*clientpb.Empty, error)
	GetListeners(context.Context, *clientpb.Empty) (*clientpb.Listeners, error)
	GetPipelines(context.Context, *clientpb.Empty) (*clientpb.Pipelines, error)
	GetJobs(context.Context, *clientpb.Empty) (*clientpb.Jobs, error)
	GetTasks(context.Context, *clientpb.TaskRequest) (*clientpb.Tasks, error)
	GetTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error)
	GetTaskFiles(context.Context, *clientpb.Session) (*clientpb.Files, error)
	WaitTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error)
	WaitTaskFinish(context.Context, *clientpb.Task) (*clientpb.TaskContext, error)
	GetAllTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContexts, error)
	GetFiles(context.Context, *clientpb.Session) (*clientpb.Files, error)
	// event
	Events(*clientpb.Empty, MaliceRPC_EventsServer) error
	Broadcast(context.Context, *clientpb.Event) (*clientpb.Empty, error)
	Notify(context.Context, *clientpb.Event) (*clientpb.Empty, error)
	SessionEvent(context.Context, *clientpb.Event) (*clientpb.Empty, error)
	OnHook(context.Context, *clientpb.On) (*clientpb.Empty, error)
	// implant::internal
	Ping(context.Context, *implantpb.Ping) (*clientpb.Task, error)
	Sleep(context.Context, *implantpb.Timer) (*clientpb.Task, error)
	Suicide(context.Context, *implantpb.Request) (*clientpb.Task, error)
	ListModule(context.Context, *implantpb.Request) (*clientpb.Task, error)
	LoadModule(context.Context, *implantpb.LoadModule) (*clientpb.Task, error)
	RefreshModule(context.Context, *implantpb.Request) (*clientpb.Task, error)
	ListAddon(context.Context, *implantpb.Request) (*clientpb.Task, error)
	LoadAddon(context.Context, *implantpb.LoadAddon) (*clientpb.Task, error)
	ExecuteAddon(context.Context, *implantpb.ExecuteAddon) (*clientpb.Task, error)
	Clear(context.Context, *implantpb.Request) (*clientpb.Task, error)
	CancelTask(context.Context, *implantpb.ImplantTask) (*clientpb.Task, error)
	// implant::bind
	Polling(context.Context, *clientpb.Polling) (*clientpb.Empty, error)
	// implant::file
	Upload(context.Context, *implantpb.UploadRequest) (*clientpb.Task, error)
	Download(context.Context, *implantpb.DownloadRequest) (*clientpb.Task, error)
	Sync(context.Context, *clientpb.Sync) (*clientpb.SyncResp, error)
	// implant::fs
	Pwd(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Ls(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Cd(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Rm(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Mv(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Cp(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Cat(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Mkdir(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Chmod(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Chown(context.Context, *implantpb.ChownRequest) (*clientpb.Task, error)
	// implant::sys
	Kill(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Ps(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Netstat(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Curl(context.Context, *implantpb.CurlRequest) (*clientpb.Task, error)
	Env(context.Context, *implantpb.Request) (*clientpb.Task, error)
	SetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error)
	UnsetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Whoami(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Info(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Bypass(context.Context, *implantpb.BypassRequest) (*clientpb.Task, error)
	// implant::sys::reg
	RegQuery(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	RegAdd(context.Context, *implantpb.RegistryWriteRequest) (*clientpb.Task, error)
	RegDelete(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	RegListKey(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	RegListValue(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	// implant::sys::service
	ServiceList(context.Context, *implantpb.Request) (*clientpb.Task, error)
	ServiceCreate(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceStart(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceStop(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceQuery(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceDelete(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	// implant::sys::taskschd
	TaskSchdList(context.Context, *implantpb.Request) (*clientpb.Task, error)
	TaskSchdCreate(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdStart(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdStop(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdDelete(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdQuery(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdRun(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	// implant::sys:wmi
	WmiQuery(context.Context, *implantpb.WmiQueryRequest) (*clientpb.Task, error)
	WmiExecute(context.Context, *implantpb.WmiMethodRequest) (*clientpb.Task, error)
	// implant::sys:token
	Runas(context.Context, *implantpb.RunAsRequest) (*clientpb.Task, error)
	Privs(context.Context, *implantpb.Request) (*clientpb.Task, error)
	GetSystem(context.Context, *implantpb.Request) (*clientpb.Task, error)
	// implant::sys::pipe
	PipeUpload(context.Context, *implantpb.PipeRequest) (*clientpb.Task, error)
	PipeRead(context.Context, *implantpb.PipeRequest) (*clientpb.Task, error)
	PipeClose(context.Context, *implantpb.PipeRequest) (*clientpb.Task, error)
	// implant:execute
	Execute(context.Context, *implantpb.ExecRequest) (*clientpb.Task, error)
	ExecuteSpawn(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteAssembly(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecutePowerpick(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteEXE(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteDLL(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteArmory(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteShellcode(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteBof(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteLocal(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	// shellcode
	EXE2Shellcode(context.Context, *clientpb.EXE2Shellcode) (*clientpb.Bin, error)
	DLL2Shellcode(context.Context, *clientpb.DLL2Shellcode) (*clientpb.Bin, error)
	ShellcodeEncode(context.Context, *clientpb.ShellcodeEncode) (*clientpb.Bin, error)
	// jobs
	ListJobs(context.Context, *clientpb.Empty) (*clientpb.Pipelines, error)
	// Websites
	Websites(context.Context, *clientpb.Empty) (*clientpb.Websites, error)
	Website(context.Context, *clientpb.Website) (*clientpb.Website, error)
	WebsiteRemove(context.Context, *clientpb.Website) (*clientpb.Empty, error)
	WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error)
	// generator
	NewProfile(context.Context, *clientpb.Profile) (*clientpb.Empty, error)
	GetProfiles(context.Context, *clientpb.Empty) (*clientpb.Profiles, error)
	Build(context.Context, *clientpb.Generate) (*clientpb.Builder, error)
	BuildLog(context.Context, *clientpb.Builder) (*clientpb.Builder, error)
	DownloadArtifact(context.Context, *clientpb.Builder) (*clientpb.Builder, error)
	UploadArtifact(context.Context, *clientpb.Builder) (*clientpb.Builder, error)
	ListArtifact(context.Context, *clientpb.Empty) (*clientpb.Builders, error)
	MaleficSRDI(context.Context, *clientpb.Builder) (*clientpb.Builder, error)
	BuildModules(context.Context, *clientpb.Generate) (*clientpb.Builder, error)
	// action
	TriggerWorkflowDispatch(context.Context, *clientpb.WorkflowRequest) (*clientpb.Builder, error)
	EnableWorkflow(context.Context, *clientpb.WorkflowRequest) (*clientpb.Empty, error)
	DisableWorkflow(context.Context, *clientpb.WorkflowRequest) (*clientpb.Empty, error)
	ListRepositoryWorkflows(context.Context, *clientpb.WorkflowRequest) (*clientpb.ListWorkflowsResponse, error)
	mustEmbedUnimplementedMaliceRPCServer()
}

// UnimplementedMaliceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMaliceRPCServer struct {
}

func (UnimplementedMaliceRPCServer) LoginClient(context.Context, *clientpb.LoginReq) (*clientpb.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginClient not implemented")
}
func (UnimplementedMaliceRPCServer) GetBasic(context.Context, *clientpb.Empty) (*clientpb.Basic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasic not implemented")
}
func (UnimplementedMaliceRPCServer) GetClients(context.Context, *clientpb.Empty) (*clientpb.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedMaliceRPCServer) GetSessions(context.Context, *clientpb.SessionRequest) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedMaliceRPCServer) GetSession(context.Context, *clientpb.SessionRequest) (*clientpb.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedMaliceRPCServer) GetSessionHistory(context.Context, *clientpb.SessionLog) (*clientpb.TasksContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionHistory not implemented")
}
func (UnimplementedMaliceRPCServer) SessionManage(context.Context, *clientpb.BasicUpdateSession) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionManage not implemented")
}
func (UnimplementedMaliceRPCServer) GetListeners(context.Context, *clientpb.Empty) (*clientpb.Listeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeners not implemented")
}
func (UnimplementedMaliceRPCServer) GetPipelines(context.Context, *clientpb.Empty) (*clientpb.Pipelines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelines not implemented")
}
func (UnimplementedMaliceRPCServer) GetJobs(context.Context, *clientpb.Empty) (*clientpb.Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedMaliceRPCServer) GetTasks(context.Context, *clientpb.TaskRequest) (*clientpb.Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedMaliceRPCServer) GetTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskContent not implemented")
}
func (UnimplementedMaliceRPCServer) GetTaskFiles(context.Context, *clientpb.Session) (*clientpb.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskFiles not implemented")
}
func (UnimplementedMaliceRPCServer) WaitTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitTaskContent not implemented")
}
func (UnimplementedMaliceRPCServer) WaitTaskFinish(context.Context, *clientpb.Task) (*clientpb.TaskContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitTaskFinish not implemented")
}
func (UnimplementedMaliceRPCServer) GetAllTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContexts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTaskContent not implemented")
}
func (UnimplementedMaliceRPCServer) GetFiles(context.Context, *clientpb.Session) (*clientpb.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedMaliceRPCServer) Events(*clientpb.Empty, MaliceRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedMaliceRPCServer) Broadcast(context.Context, *clientpb.Event) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedMaliceRPCServer) Notify(context.Context, *clientpb.Event) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedMaliceRPCServer) SessionEvent(context.Context, *clientpb.Event) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionEvent not implemented")
}
func (UnimplementedMaliceRPCServer) OnHook(context.Context, *clientpb.On) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnHook not implemented")
}
func (UnimplementedMaliceRPCServer) Ping(context.Context, *implantpb.Ping) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMaliceRPCServer) Sleep(context.Context, *implantpb.Timer) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedMaliceRPCServer) Suicide(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suicide not implemented")
}
func (UnimplementedMaliceRPCServer) ListModule(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModule not implemented")
}
func (UnimplementedMaliceRPCServer) LoadModule(context.Context, *implantpb.LoadModule) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModule not implemented")
}
func (UnimplementedMaliceRPCServer) RefreshModule(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshModule not implemented")
}
func (UnimplementedMaliceRPCServer) ListAddon(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddon not implemented")
}
func (UnimplementedMaliceRPCServer) LoadAddon(context.Context, *implantpb.LoadAddon) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAddon not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteAddon(context.Context, *implantpb.ExecuteAddon) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddon not implemented")
}
func (UnimplementedMaliceRPCServer) Clear(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedMaliceRPCServer) CancelTask(context.Context, *implantpb.ImplantTask) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedMaliceRPCServer) Polling(context.Context, *clientpb.Polling) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Polling not implemented")
}
func (UnimplementedMaliceRPCServer) Upload(context.Context, *implantpb.UploadRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMaliceRPCServer) Download(context.Context, *implantpb.DownloadRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMaliceRPCServer) Sync(context.Context, *clientpb.Sync) (*clientpb.SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedMaliceRPCServer) Pwd(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pwd not implemented")
}
func (UnimplementedMaliceRPCServer) Ls(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (UnimplementedMaliceRPCServer) Cd(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cd not implemented")
}
func (UnimplementedMaliceRPCServer) Rm(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rm not implemented")
}
func (UnimplementedMaliceRPCServer) Mv(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mv not implemented")
}
func (UnimplementedMaliceRPCServer) Cp(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cp not implemented")
}
func (UnimplementedMaliceRPCServer) Cat(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cat not implemented")
}
func (UnimplementedMaliceRPCServer) Mkdir(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedMaliceRPCServer) Chmod(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedMaliceRPCServer) Chown(context.Context, *implantpb.ChownRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedMaliceRPCServer) Kill(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedMaliceRPCServer) Ps(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ps not implemented")
}
func (UnimplementedMaliceRPCServer) Netstat(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Netstat not implemented")
}
func (UnimplementedMaliceRPCServer) Curl(context.Context, *implantpb.CurlRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Curl not implemented")
}
func (UnimplementedMaliceRPCServer) Env(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Env not implemented")
}
func (UnimplementedMaliceRPCServer) SetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedMaliceRPCServer) UnsetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetEnv not implemented")
}
func (UnimplementedMaliceRPCServer) Whoami(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedMaliceRPCServer) Info(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMaliceRPCServer) Bypass(context.Context, *implantpb.BypassRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bypass not implemented")
}
func (UnimplementedMaliceRPCServer) RegQuery(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegQuery not implemented")
}
func (UnimplementedMaliceRPCServer) RegAdd(context.Context, *implantpb.RegistryWriteRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegAdd not implemented")
}
func (UnimplementedMaliceRPCServer) RegDelete(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegDelete not implemented")
}
func (UnimplementedMaliceRPCServer) RegListKey(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegListKey not implemented")
}
func (UnimplementedMaliceRPCServer) RegListValue(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegListValue not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceList(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceList not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceCreate(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCreate not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceStart(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStart not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceStop(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStop not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceQuery(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceQuery not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceDelete(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelete not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdList(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdList not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdCreate(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdCreate not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdStart(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdStart not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdStop(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdStop not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdDelete(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdDelete not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdQuery(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdQuery not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdRun(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdRun not implemented")
}
func (UnimplementedMaliceRPCServer) WmiQuery(context.Context, *implantpb.WmiQueryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WmiQuery not implemented")
}
func (UnimplementedMaliceRPCServer) WmiExecute(context.Context, *implantpb.WmiMethodRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WmiExecute not implemented")
}
func (UnimplementedMaliceRPCServer) Runas(context.Context, *implantpb.RunAsRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Runas not implemented")
}
func (UnimplementedMaliceRPCServer) Privs(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Privs not implemented")
}
func (UnimplementedMaliceRPCServer) GetSystem(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedMaliceRPCServer) PipeUpload(context.Context, *implantpb.PipeRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipeUpload not implemented")
}
func (UnimplementedMaliceRPCServer) PipeRead(context.Context, *implantpb.PipeRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipeRead not implemented")
}
func (UnimplementedMaliceRPCServer) PipeClose(context.Context, *implantpb.PipeRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipeClose not implemented")
}
func (UnimplementedMaliceRPCServer) Execute(context.Context, *implantpb.ExecRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteSpawn(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSpawn not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteAssembly(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAssembly not implemented")
}
func (UnimplementedMaliceRPCServer) ExecutePowerpick(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePowerpick not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteEXE(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEXE not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteDLL(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDLL not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteArmory(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteArmory not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteShellcode(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteShellcode not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteBof(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBof not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteLocal(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteLocal not implemented")
}
func (UnimplementedMaliceRPCServer) EXE2Shellcode(context.Context, *clientpb.EXE2Shellcode) (*clientpb.Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXE2Shellcode not implemented")
}
func (UnimplementedMaliceRPCServer) DLL2Shellcode(context.Context, *clientpb.DLL2Shellcode) (*clientpb.Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DLL2Shellcode not implemented")
}
func (UnimplementedMaliceRPCServer) ShellcodeEncode(context.Context, *clientpb.ShellcodeEncode) (*clientpb.Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeEncode not implemented")
}
func (UnimplementedMaliceRPCServer) ListJobs(context.Context, *clientpb.Empty) (*clientpb.Pipelines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedMaliceRPCServer) Websites(context.Context, *clientpb.Empty) (*clientpb.Websites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedMaliceRPCServer) Website(context.Context, *clientpb.Website) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteRemove(context.Context, *clientpb.Website) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemove not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteAddContent not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteUpdateContent not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemoveContent not implemented")
}
func (UnimplementedMaliceRPCServer) NewProfile(context.Context, *clientpb.Profile) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProfile not implemented")
}
func (UnimplementedMaliceRPCServer) GetProfiles(context.Context, *clientpb.Empty) (*clientpb.Profiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}
func (UnimplementedMaliceRPCServer) Build(context.Context, *clientpb.Generate) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedMaliceRPCServer) BuildLog(context.Context, *clientpb.Builder) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildLog not implemented")
}
func (UnimplementedMaliceRPCServer) DownloadArtifact(context.Context, *clientpb.Builder) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadArtifact not implemented")
}
func (UnimplementedMaliceRPCServer) UploadArtifact(context.Context, *clientpb.Builder) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadArtifact not implemented")
}
func (UnimplementedMaliceRPCServer) ListArtifact(context.Context, *clientpb.Empty) (*clientpb.Builders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifact not implemented")
}
func (UnimplementedMaliceRPCServer) MaleficSRDI(context.Context, *clientpb.Builder) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaleficSRDI not implemented")
}
func (UnimplementedMaliceRPCServer) BuildModules(context.Context, *clientpb.Generate) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildModules not implemented")
}
func (UnimplementedMaliceRPCServer) TriggerWorkflowDispatch(context.Context, *clientpb.WorkflowRequest) (*clientpb.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerWorkflowDispatch not implemented")
}
func (UnimplementedMaliceRPCServer) EnableWorkflow(context.Context, *clientpb.WorkflowRequest) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableWorkflow not implemented")
}
func (UnimplementedMaliceRPCServer) DisableWorkflow(context.Context, *clientpb.WorkflowRequest) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWorkflow not implemented")
}
func (UnimplementedMaliceRPCServer) ListRepositoryWorkflows(context.Context, *clientpb.WorkflowRequest) (*clientpb.ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositoryWorkflows not implemented")
}
func (UnimplementedMaliceRPCServer) mustEmbedUnimplementedMaliceRPCServer() {}

// UnsafeMaliceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaliceRPCServer will
// result in compilation errors.
type UnsafeMaliceRPCServer interface {
	mustEmbedUnimplementedMaliceRPCServer()
}

func RegisterMaliceRPCServer(s grpc.ServiceRegistrar, srv MaliceRPCServer) {
	s.RegisterService(&MaliceRPC_ServiceDesc, srv)
}

func _MaliceRPC_LoginClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).LoginClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_LoginClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).LoginClient(ctx, req.(*clientpb.LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetBasic(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetClients(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSessions(ctx, req.(*clientpb.SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSession(ctx, req.(*clientpb.SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSessionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSessionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetSessionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSessionHistory(ctx, req.(*clientpb.SessionLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_SessionManage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BasicUpdateSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).SessionManage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_SessionManage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).SessionManage(ctx, req.(*clientpb.BasicUpdateSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetListeners(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetPipelines(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetJobs(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetTasks(ctx, req.(*clientpb.TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetTaskContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetTaskContent(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetTaskFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetTaskFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetTaskFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetTaskFiles(ctx, req.(*clientpb.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WaitTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WaitTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WaitTaskContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WaitTaskContent(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WaitTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WaitTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WaitTaskFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WaitTaskFinish(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetAllTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetAllTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetAllTaskContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetAllTaskContent(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetFiles(ctx, req.(*clientpb.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaliceRPCServer).Events(m, &maliceRPCEventsServer{stream})
}

type MaliceRPC_EventsServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type maliceRPCEventsServer struct {
	grpc.ServerStream
}

func (x *maliceRPCEventsServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _MaliceRPC_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Broadcast(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Notify(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_SessionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).SessionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_SessionEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).SessionEvent(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_OnHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.On)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).OnHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_OnHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).OnHook(ctx, req.(*clientpb.On))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Ping(ctx, req.(*implantpb.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Timer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Sleep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Sleep(ctx, req.(*implantpb.Timer))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Suicide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Suicide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Suicide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Suicide(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ListModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListModule(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_LoadModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.LoadModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).LoadModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_LoadModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).LoadModule(ctx, req.(*implantpb.LoadModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RefreshModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RefreshModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_RefreshModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RefreshModule(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ListAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListAddon(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_LoadAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.LoadAddon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).LoadAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_LoadAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).LoadAddon(ctx, req.(*implantpb.LoadAddon))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteAddon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteAddon(ctx, req.(*implantpb.ExecuteAddon))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Clear(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ImplantTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).CancelTask(ctx, req.(*implantpb.ImplantTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Polling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Polling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Polling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Polling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Polling(ctx, req.(*clientpb.Polling))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Upload(ctx, req.(*implantpb.UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Download(ctx, req.(*implantpb.DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Sync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Sync(ctx, req.(*clientpb.Sync))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Pwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Pwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Pwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Pwd(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Ls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Ls(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Cd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Cd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Cd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Cd(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Rm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Rm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Rm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Rm(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Mv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Mv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Mv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Mv(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Cp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Cp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Cp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Cp(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Cat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Cat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Cat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Cat(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Mkdir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Mkdir(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Chmod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Chmod(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Chown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Chown(ctx, req.(*implantpb.ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Kill(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Ps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Ps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Ps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Ps(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Netstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Netstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Netstat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Netstat(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Curl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.CurlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Curl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Curl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Curl(ctx, req.(*implantpb.CurlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Env_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Env(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Env_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Env(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_SetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).SetEnv(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_UnsetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).UnsetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_UnsetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).UnsetEnv(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Whoami_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Whoami(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Info(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Bypass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.BypassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Bypass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Bypass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Bypass(ctx, req.(*implantpb.BypassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_RegQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegQuery(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_RegAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegAdd(ctx, req.(*implantpb.RegistryWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_RegDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegDelete(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_RegListKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegListKey(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegListValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegListValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_RegListValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegListValue(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceList(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ServiceCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceCreate(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ServiceStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceStart(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ServiceStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceStop(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ServiceQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceQuery(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ServiceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceDelete(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdList(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdCreate(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdStart(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdStop(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdDelete(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdQuery(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TaskSchdRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdRun(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WmiQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.WmiQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WmiQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WmiQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WmiQuery(ctx, req.(*implantpb.WmiQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WmiExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.WmiMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WmiExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WmiExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WmiExecute(ctx, req.(*implantpb.WmiMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Runas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RunAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Runas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Runas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Runas(ctx, req.(*implantpb.RunAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Privs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Privs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Privs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Privs(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSystem(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_PipeUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.PipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).PipeUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_PipeUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).PipeUpload(ctx, req.(*implantpb.PipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_PipeRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.PipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).PipeRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_PipeRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).PipeRead(ctx, req.(*implantpb.PipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_PipeClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.PipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).PipeClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_PipeClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).PipeClose(ctx, req.(*implantpb.PipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Execute(ctx, req.(*implantpb.ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteSpawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteSpawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteSpawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteSpawn(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteAssembly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteAssembly(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecutePowerpick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecutePowerpick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecutePowerpick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecutePowerpick(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteEXE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteEXE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteEXE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteEXE(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteDLL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteDLL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteDLL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteDLL(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteArmory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteArmory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteArmory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteArmory(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteShellcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteShellcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteShellcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteShellcode(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteBof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteBof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteBof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteBof(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ExecuteLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteLocal(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_EXE2Shellcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.EXE2Shellcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).EXE2Shellcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_EXE2Shellcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).EXE2Shellcode(ctx, req.(*clientpb.EXE2Shellcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_DLL2Shellcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DLL2Shellcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).DLL2Shellcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_DLL2Shellcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).DLL2Shellcode(ctx, req.(*clientpb.DLL2Shellcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ShellcodeEncode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeEncode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ShellcodeEncode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ShellcodeEncode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ShellcodeEncode(ctx, req.(*clientpb.ShellcodeEncode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListJobs(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Websites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Websites(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Website_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Website(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WebsiteRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteRemove(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteAddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteAddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WebsiteAddContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteAddContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteUpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteUpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WebsiteUpdateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteUpdateContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteRemoveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteRemoveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteRemoveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_WebsiteRemoveContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteRemoveContent(ctx, req.(*clientpb.WebsiteRemoveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_NewProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).NewProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_NewProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).NewProfile(ctx, req.(*clientpb.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_GetProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetProfiles(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Generate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_Build_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Build(ctx, req.(*clientpb.Generate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_BuildLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Builder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).BuildLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_BuildLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).BuildLog(ctx, req.(*clientpb.Builder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_DownloadArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Builder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).DownloadArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_DownloadArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).DownloadArtifact(ctx, req.(*clientpb.Builder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_UploadArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Builder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).UploadArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_UploadArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).UploadArtifact(ctx, req.(*clientpb.Builder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ListArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListArtifact(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_MaleficSRDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Builder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).MaleficSRDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_MaleficSRDI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).MaleficSRDI(ctx, req.(*clientpb.Builder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_BuildModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Generate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).BuildModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_BuildModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).BuildModules(ctx, req.(*clientpb.Generate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TriggerWorkflowDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TriggerWorkflowDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_TriggerWorkflowDispatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TriggerWorkflowDispatch(ctx, req.(*clientpb.WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_EnableWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).EnableWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_EnableWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).EnableWorkflow(ctx, req.(*clientpb.WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_DisableWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).DisableWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_DisableWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).DisableWorkflow(ctx, req.(*clientpb.WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListRepositoryWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListRepositoryWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaliceRPC_ListRepositoryWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListRepositoryWorkflows(ctx, req.(*clientpb.WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaliceRPC_ServiceDesc is the grpc.ServiceDesc for MaliceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaliceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientrpc.MaliceRPC",
	HandlerType: (*MaliceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginClient",
			Handler:    _MaliceRPC_LoginClient_Handler,
		},
		{
			MethodName: "GetBasic",
			Handler:    _MaliceRPC_GetBasic_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _MaliceRPC_GetClients_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _MaliceRPC_GetSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _MaliceRPC_GetSession_Handler,
		},
		{
			MethodName: "GetSessionHistory",
			Handler:    _MaliceRPC_GetSessionHistory_Handler,
		},
		{
			MethodName: "SessionManage",
			Handler:    _MaliceRPC_SessionManage_Handler,
		},
		{
			MethodName: "GetListeners",
			Handler:    _MaliceRPC_GetListeners_Handler,
		},
		{
			MethodName: "GetPipelines",
			Handler:    _MaliceRPC_GetPipelines_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _MaliceRPC_GetJobs_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _MaliceRPC_GetTasks_Handler,
		},
		{
			MethodName: "GetTaskContent",
			Handler:    _MaliceRPC_GetTaskContent_Handler,
		},
		{
			MethodName: "GetTaskFiles",
			Handler:    _MaliceRPC_GetTaskFiles_Handler,
		},
		{
			MethodName: "WaitTaskContent",
			Handler:    _MaliceRPC_WaitTaskContent_Handler,
		},
		{
			MethodName: "WaitTaskFinish",
			Handler:    _MaliceRPC_WaitTaskFinish_Handler,
		},
		{
			MethodName: "GetAllTaskContent",
			Handler:    _MaliceRPC_GetAllTaskContent_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _MaliceRPC_GetFiles_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _MaliceRPC_Broadcast_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _MaliceRPC_Notify_Handler,
		},
		{
			MethodName: "SessionEvent",
			Handler:    _MaliceRPC_SessionEvent_Handler,
		},
		{
			MethodName: "OnHook",
			Handler:    _MaliceRPC_OnHook_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MaliceRPC_Ping_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _MaliceRPC_Sleep_Handler,
		},
		{
			MethodName: "Suicide",
			Handler:    _MaliceRPC_Suicide_Handler,
		},
		{
			MethodName: "ListModule",
			Handler:    _MaliceRPC_ListModule_Handler,
		},
		{
			MethodName: "LoadModule",
			Handler:    _MaliceRPC_LoadModule_Handler,
		},
		{
			MethodName: "RefreshModule",
			Handler:    _MaliceRPC_RefreshModule_Handler,
		},
		{
			MethodName: "ListAddon",
			Handler:    _MaliceRPC_ListAddon_Handler,
		},
		{
			MethodName: "LoadAddon",
			Handler:    _MaliceRPC_LoadAddon_Handler,
		},
		{
			MethodName: "ExecuteAddon",
			Handler:    _MaliceRPC_ExecuteAddon_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _MaliceRPC_Clear_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _MaliceRPC_CancelTask_Handler,
		},
		{
			MethodName: "Polling",
			Handler:    _MaliceRPC_Polling_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _MaliceRPC_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _MaliceRPC_Download_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _MaliceRPC_Sync_Handler,
		},
		{
			MethodName: "Pwd",
			Handler:    _MaliceRPC_Pwd_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _MaliceRPC_Ls_Handler,
		},
		{
			MethodName: "Cd",
			Handler:    _MaliceRPC_Cd_Handler,
		},
		{
			MethodName: "Rm",
			Handler:    _MaliceRPC_Rm_Handler,
		},
		{
			MethodName: "Mv",
			Handler:    _MaliceRPC_Mv_Handler,
		},
		{
			MethodName: "Cp",
			Handler:    _MaliceRPC_Cp_Handler,
		},
		{
			MethodName: "Cat",
			Handler:    _MaliceRPC_Cat_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _MaliceRPC_Mkdir_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _MaliceRPC_Chmod_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _MaliceRPC_Chown_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _MaliceRPC_Kill_Handler,
		},
		{
			MethodName: "Ps",
			Handler:    _MaliceRPC_Ps_Handler,
		},
		{
			MethodName: "Netstat",
			Handler:    _MaliceRPC_Netstat_Handler,
		},
		{
			MethodName: "Curl",
			Handler:    _MaliceRPC_Curl_Handler,
		},
		{
			MethodName: "Env",
			Handler:    _MaliceRPC_Env_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _MaliceRPC_SetEnv_Handler,
		},
		{
			MethodName: "UnsetEnv",
			Handler:    _MaliceRPC_UnsetEnv_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _MaliceRPC_Whoami_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _MaliceRPC_Info_Handler,
		},
		{
			MethodName: "Bypass",
			Handler:    _MaliceRPC_Bypass_Handler,
		},
		{
			MethodName: "RegQuery",
			Handler:    _MaliceRPC_RegQuery_Handler,
		},
		{
			MethodName: "RegAdd",
			Handler:    _MaliceRPC_RegAdd_Handler,
		},
		{
			MethodName: "RegDelete",
			Handler:    _MaliceRPC_RegDelete_Handler,
		},
		{
			MethodName: "RegListKey",
			Handler:    _MaliceRPC_RegListKey_Handler,
		},
		{
			MethodName: "RegListValue",
			Handler:    _MaliceRPC_RegListValue_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _MaliceRPC_ServiceList_Handler,
		},
		{
			MethodName: "ServiceCreate",
			Handler:    _MaliceRPC_ServiceCreate_Handler,
		},
		{
			MethodName: "ServiceStart",
			Handler:    _MaliceRPC_ServiceStart_Handler,
		},
		{
			MethodName: "ServiceStop",
			Handler:    _MaliceRPC_ServiceStop_Handler,
		},
		{
			MethodName: "ServiceQuery",
			Handler:    _MaliceRPC_ServiceQuery_Handler,
		},
		{
			MethodName: "ServiceDelete",
			Handler:    _MaliceRPC_ServiceDelete_Handler,
		},
		{
			MethodName: "TaskSchdList",
			Handler:    _MaliceRPC_TaskSchdList_Handler,
		},
		{
			MethodName: "TaskSchdCreate",
			Handler:    _MaliceRPC_TaskSchdCreate_Handler,
		},
		{
			MethodName: "TaskSchdStart",
			Handler:    _MaliceRPC_TaskSchdStart_Handler,
		},
		{
			MethodName: "TaskSchdStop",
			Handler:    _MaliceRPC_TaskSchdStop_Handler,
		},
		{
			MethodName: "TaskSchdDelete",
			Handler:    _MaliceRPC_TaskSchdDelete_Handler,
		},
		{
			MethodName: "TaskSchdQuery",
			Handler:    _MaliceRPC_TaskSchdQuery_Handler,
		},
		{
			MethodName: "TaskSchdRun",
			Handler:    _MaliceRPC_TaskSchdRun_Handler,
		},
		{
			MethodName: "WmiQuery",
			Handler:    _MaliceRPC_WmiQuery_Handler,
		},
		{
			MethodName: "WmiExecute",
			Handler:    _MaliceRPC_WmiExecute_Handler,
		},
		{
			MethodName: "Runas",
			Handler:    _MaliceRPC_Runas_Handler,
		},
		{
			MethodName: "Privs",
			Handler:    _MaliceRPC_Privs_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _MaliceRPC_GetSystem_Handler,
		},
		{
			MethodName: "PipeUpload",
			Handler:    _MaliceRPC_PipeUpload_Handler,
		},
		{
			MethodName: "PipeRead",
			Handler:    _MaliceRPC_PipeRead_Handler,
		},
		{
			MethodName: "PipeClose",
			Handler:    _MaliceRPC_PipeClose_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _MaliceRPC_Execute_Handler,
		},
		{
			MethodName: "ExecuteSpawn",
			Handler:    _MaliceRPC_ExecuteSpawn_Handler,
		},
		{
			MethodName: "ExecuteAssembly",
			Handler:    _MaliceRPC_ExecuteAssembly_Handler,
		},
		{
			MethodName: "ExecutePowerpick",
			Handler:    _MaliceRPC_ExecutePowerpick_Handler,
		},
		{
			MethodName: "ExecuteEXE",
			Handler:    _MaliceRPC_ExecuteEXE_Handler,
		},
		{
			MethodName: "ExecuteDLL",
			Handler:    _MaliceRPC_ExecuteDLL_Handler,
		},
		{
			MethodName: "ExecuteArmory",
			Handler:    _MaliceRPC_ExecuteArmory_Handler,
		},
		{
			MethodName: "ExecuteShellcode",
			Handler:    _MaliceRPC_ExecuteShellcode_Handler,
		},
		{
			MethodName: "ExecuteBof",
			Handler:    _MaliceRPC_ExecuteBof_Handler,
		},
		{
			MethodName: "ExecuteLocal",
			Handler:    _MaliceRPC_ExecuteLocal_Handler,
		},
		{
			MethodName: "EXE2Shellcode",
			Handler:    _MaliceRPC_EXE2Shellcode_Handler,
		},
		{
			MethodName: "DLL2Shellcode",
			Handler:    _MaliceRPC_DLL2Shellcode_Handler,
		},
		{
			MethodName: "ShellcodeEncode",
			Handler:    _MaliceRPC_ShellcodeEncode_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _MaliceRPC_ListJobs_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _MaliceRPC_Websites_Handler,
		},
		{
			MethodName: "Website",
			Handler:    _MaliceRPC_Website_Handler,
		},
		{
			MethodName: "WebsiteRemove",
			Handler:    _MaliceRPC_WebsiteRemove_Handler,
		},
		{
			MethodName: "WebsiteAddContent",
			Handler:    _MaliceRPC_WebsiteAddContent_Handler,
		},
		{
			MethodName: "WebsiteUpdateContent",
			Handler:    _MaliceRPC_WebsiteUpdateContent_Handler,
		},
		{
			MethodName: "WebsiteRemoveContent",
			Handler:    _MaliceRPC_WebsiteRemoveContent_Handler,
		},
		{
			MethodName: "NewProfile",
			Handler:    _MaliceRPC_NewProfile_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _MaliceRPC_GetProfiles_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _MaliceRPC_Build_Handler,
		},
		{
			MethodName: "BuildLog",
			Handler:    _MaliceRPC_BuildLog_Handler,
		},
		{
			MethodName: "DownloadArtifact",
			Handler:    _MaliceRPC_DownloadArtifact_Handler,
		},
		{
			MethodName: "UploadArtifact",
			Handler:    _MaliceRPC_UploadArtifact_Handler,
		},
		{
			MethodName: "ListArtifact",
			Handler:    _MaliceRPC_ListArtifact_Handler,
		},
		{
			MethodName: "MaleficSRDI",
			Handler:    _MaliceRPC_MaleficSRDI_Handler,
		},
		{
			MethodName: "BuildModules",
			Handler:    _MaliceRPC_BuildModules_Handler,
		},
		{
			MethodName: "TriggerWorkflowDispatch",
			Handler:    _MaliceRPC_TriggerWorkflowDispatch_Handler,
		},
		{
			MethodName: "EnableWorkflow",
			Handler:    _MaliceRPC_EnableWorkflow_Handler,
		},
		{
			MethodName: "DisableWorkflow",
			Handler:    _MaliceRPC_DisableWorkflow_Handler,
		},
		{
			MethodName: "ListRepositoryWorkflows",
			Handler:    _MaliceRPC_ListRepositoryWorkflows_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _MaliceRPC_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/clientrpc/service.proto",
}

const (
	RootRPC_AddClient_FullMethodName      = "/clientrpc.RootRPC/AddClient"
	RootRPC_RemoveClient_FullMethodName   = "/clientrpc.RootRPC/RemoveClient"
	RootRPC_ListClients_FullMethodName    = "/clientrpc.RootRPC/ListClients"
	RootRPC_AddListener_FullMethodName    = "/clientrpc.RootRPC/AddListener"
	RootRPC_RemoveListener_FullMethodName = "/clientrpc.RootRPC/RemoveListener"
	RootRPC_ListListeners_FullMethodName  = "/clientrpc.RootRPC/ListListeners"
)

// RootRPCClient is the client API for RootRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootRPCClient interface {
	// manager
	AddClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	RemoveClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	ListClients(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Clients, error)
	AddListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	RemoveListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	ListListeners(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Listeners, error)
}

type rootRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRootRPCClient(cc grpc.ClientConnInterface) RootRPCClient {
	return &rootRPCClient{cc}
}

func (c *rootRPCClient) AddClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, RootRPC_AddClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) RemoveClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, RootRPC_RemoveClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) ListClients(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Clients, error) {
	out := new(clientpb.Clients)
	err := c.cc.Invoke(ctx, RootRPC_ListClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) AddListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, RootRPC_AddListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) RemoveListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, RootRPC_RemoveListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) ListListeners(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Listeners, error) {
	out := new(clientpb.Listeners)
	err := c.cc.Invoke(ctx, RootRPC_ListListeners_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootRPCServer is the server API for RootRPC service.
// All implementations must embed UnimplementedRootRPCServer
// for forward compatibility
type RootRPCServer interface {
	// manager
	AddClient(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	RemoveClient(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	ListClients(context.Context, *rootpb.Operator) (*clientpb.Clients, error)
	AddListener(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	RemoveListener(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	ListListeners(context.Context, *rootpb.Operator) (*clientpb.Listeners, error)
	mustEmbedUnimplementedRootRPCServer()
}

// UnimplementedRootRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRootRPCServer struct {
}

func (UnimplementedRootRPCServer) AddClient(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedRootRPCServer) RemoveClient(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClient not implemented")
}
func (UnimplementedRootRPCServer) ListClients(context.Context, *rootpb.Operator) (*clientpb.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedRootRPCServer) AddListener(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListener not implemented")
}
func (UnimplementedRootRPCServer) RemoveListener(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveListener not implemented")
}
func (UnimplementedRootRPCServer) ListListeners(context.Context, *rootpb.Operator) (*clientpb.Listeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListeners not implemented")
}
func (UnimplementedRootRPCServer) mustEmbedUnimplementedRootRPCServer() {}

// UnsafeRootRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootRPCServer will
// result in compilation errors.
type UnsafeRootRPCServer interface {
	mustEmbedUnimplementedRootRPCServer()
}

func RegisterRootRPCServer(s grpc.ServiceRegistrar, srv RootRPCServer) {
	s.RegisterService(&RootRPC_ServiceDesc, srv)
}

func _RootRPC_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRPC_AddClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).AddClient(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRPC_RemoveClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).RemoveClient(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRPC_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).ListClients(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_AddListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).AddListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRPC_AddListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).AddListener(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_RemoveListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).RemoveListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRPC_RemoveListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).RemoveListener(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_ListListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).ListListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootRPC_ListListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).ListListeners(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

// RootRPC_ServiceDesc is the grpc.ServiceDesc for RootRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientrpc.RootRPC",
	HandlerType: (*RootRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _RootRPC_AddClient_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _RootRPC_RemoveClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _RootRPC_ListClients_Handler,
		},
		{
			MethodName: "AddListener",
			Handler:    _RootRPC_AddListener_Handler,
		},
		{
			MethodName: "RemoveListener",
			Handler:    _RootRPC_RemoveListener_Handler,
		},
		{
			MethodName: "ListListeners",
			Handler:    _RootRPC_ListListeners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/clientrpc/service.proto",
}
