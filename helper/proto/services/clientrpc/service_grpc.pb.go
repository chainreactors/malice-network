// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: services/clientrpc/service.proto

package clientrpc

import (
	context "context"
	clientpb "github.com/chainreactors/malice-network/helper/proto/client/clientpb"
	rootpb "github.com/chainreactors/malice-network/helper/proto/client/rootpb"
	implantpb "github.com/chainreactors/malice-network/helper/proto/implant/implantpb"
	lispb "github.com/chainreactors/malice-network/helper/proto/listener/lispb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaliceRPCClient is the client API for MaliceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaliceRPCClient interface {
	// basic
	LoginClient(ctx context.Context, in *clientpb.LoginReq, opts ...grpc.CallOption) (*clientpb.Client, error)
	GetBasic(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Basic, error)
	GetClients(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Clients, error)
	GetSessions(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	GetAlivedSessions(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	GetSession(ctx context.Context, in *clientpb.SessionRequest, opts ...grpc.CallOption) (*clientpb.Session, error)
	GetSessionLog(ctx context.Context, in *clientpb.SessionLog, opts ...grpc.CallOption) (*clientpb.TasksContext, error)
	BasicSessionOP(ctx context.Context, in *clientpb.BasicUpdateSession, opts ...grpc.CallOption) (*clientpb.Empty, error)
	GetListeners(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Listeners, error)
	GetPipelines(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*lispb.Pipelines, error)
	GetJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error)
	GetTasks(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Tasks, error)
	GetTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error)
	GetTaskFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error)
	WaitTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error)
	WaitTaskFinish(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error)
	GetAllTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContexts, error)
	GetFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error)
	// event
	Events(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (MaliceRPC_EventsClient, error)
	Broadcast(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error)
	Notify(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error)
	SessionEvent(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error)
	// implant::internal
	Sleep(ctx context.Context, in *implantpb.Timer, opts ...grpc.CallOption) (*clientpb.Task, error)
	Suicide(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	ListModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	LoadModule(ctx context.Context, in *implantpb.LoadModule, opts ...grpc.CallOption) (*clientpb.Task, error)
	RefreshModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	ListAddon(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	LoadAddon(ctx context.Context, in *implantpb.LoadAddon, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteAddon(ctx context.Context, in *implantpb.ExecuteAddon, opts ...grpc.CallOption) (*clientpb.Task, error)
	Clear(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	CancelTask(ctx context.Context, in *implantpb.ImplantTask, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::file
	Upload(ctx context.Context, in *implantpb.UploadRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Download(ctx context.Context, in *implantpb.DownloadRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Sync(ctx context.Context, in *clientpb.Sync, opts ...grpc.CallOption) (*clientpb.SyncResp, error)
	// implant::fs
	Pwd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Ls(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Cd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Rm(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Mv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Cp(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Cat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Mkdir(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Chmod(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Chown(ctx context.Context, in *implantpb.ChownRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys
	Kill(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Ps(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Netstat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Curl(ctx context.Context, in *implantpb.CurlRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Env(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	SetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	UnsetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Whoami(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Info(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	Bypass(ctx context.Context, in *implantpb.BypassRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::reg
	RegQuery(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegAdd(ctx context.Context, in *implantpb.RegistryWriteRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegDelete(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegListKey(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	RegListValue(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::service
	ServiceList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceCreate(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceStart(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceStop(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceQuery(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ServiceDelete(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys::taskschd
	TaskSchdList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdCreate(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdStart(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdStop(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdDelete(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdQuery(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	TaskSchdRun(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys:wmi
	WmiQuery(ctx context.Context, in *implantpb.WmiQueryRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	WmiExecute(ctx context.Context, in *implantpb.WmiMethodRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant::sys:token
	Runas(ctx context.Context, in *implantpb.RunAsRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	Privs(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	GetSystem(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error)
	// implant:execute
	Execute(ctx context.Context, in *implantpb.ExecRequest, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteSpawn(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteAssembly(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecutePowerpick(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteEXE(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteDLL(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteArmory(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteShellcode(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteBof(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	ExecuteLocal(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error)
	// shellcode
	EXE2Shellcode(ctx context.Context, in *clientpb.EXE2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error)
	DLL2Shellcode(ctx context.Context, in *clientpb.DLL2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error)
	ShellcodeEncode(ctx context.Context, in *clientpb.ShellcodeEncode, opts ...grpc.CallOption) (*clientpb.Bin, error)
	// jobs
	ListJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*lispb.Pipelines, error)
	// Websites
	Websites(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*lispb.Websites, error)
	Website(ctx context.Context, in *lispb.Website, opts ...grpc.CallOption) (*lispb.Website, error)
	WebsiteRemove(ctx context.Context, in *lispb.Website, opts ...grpc.CallOption) (*clientpb.Empty, error)
	WebsiteAddContent(ctx context.Context, in *lispb.WebsiteAddContent, opts ...grpc.CallOption) (*lispb.Website, error)
	WebsiteUpdateContent(ctx context.Context, in *lispb.WebsiteAddContent, opts ...grpc.CallOption) (*lispb.Website, error)
	WebsiteRemoveContent(ctx context.Context, in *lispb.WebsiteRemoveContent, opts ...grpc.CallOption) (*lispb.Website, error)
	// generator
	NewProfile(ctx context.Context, in *clientpb.Profile, opts ...grpc.CallOption) (*clientpb.Empty, error)
	GetProfiles(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Profiles, error)
	Generate(ctx context.Context, in *clientpb.Generate, opts ...grpc.CallOption) (*clientpb.Empty, error)
	DownloadOutput(ctx context.Context, in *clientpb.Sync, opts ...grpc.CallOption) (*clientpb.SyncResp, error)
	GetBuilders(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error)
}

type maliceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMaliceRPCClient(cc grpc.ClientConnInterface) MaliceRPCClient {
	return &maliceRPCClient{cc}
}

func (c *maliceRPCClient) LoginClient(ctx context.Context, in *clientpb.LoginReq, opts ...grpc.CallOption) (*clientpb.Client, error) {
	out := new(clientpb.Client)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/LoginClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetBasic(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Basic, error) {
	out := new(clientpb.Basic)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetClients(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Clients, error) {
	out := new(clientpb.Clients)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSessions(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetAlivedSessions(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetAlivedSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSession(ctx context.Context, in *clientpb.SessionRequest, opts ...grpc.CallOption) (*clientpb.Session, error) {
	out := new(clientpb.Session)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSessionLog(ctx context.Context, in *clientpb.SessionLog, opts ...grpc.CallOption) (*clientpb.TasksContext, error) {
	out := new(clientpb.TasksContext)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetSessionLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) BasicSessionOP(ctx context.Context, in *clientpb.BasicUpdateSession, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/BasicSessionOP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetListeners(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Listeners, error) {
	out := new(clientpb.Listeners)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetPipelines(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*lispb.Pipelines, error) {
	out := new(lispb.Pipelines)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error) {
	out := new(clientpb.Jobs)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetTasks(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Tasks, error) {
	out := new(clientpb.Tasks)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error) {
	out := new(clientpb.TaskContext)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetTaskContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetTaskFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error) {
	out := new(clientpb.Files)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetTaskFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WaitTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error) {
	out := new(clientpb.TaskContext)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WaitTaskContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WaitTaskFinish(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContext, error) {
	out := new(clientpb.TaskContext)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WaitTaskFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetAllTaskContent(ctx context.Context, in *clientpb.Task, opts ...grpc.CallOption) (*clientpb.TaskContexts, error) {
	out := new(clientpb.TaskContexts)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetAllTaskContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetFiles(ctx context.Context, in *clientpb.Session, opts ...grpc.CallOption) (*clientpb.Files, error) {
	out := new(clientpb.Files)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Events(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (MaliceRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaliceRPC_ServiceDesc.Streams[0], "/clientrpc.MaliceRPC/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &maliceRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MaliceRPC_EventsClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type maliceRPCEventsClient struct {
	grpc.ClientStream
}

func (x *maliceRPCEventsClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maliceRPCClient) Broadcast(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Notify(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) SessionEvent(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/SessionEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Sleep(ctx context.Context, in *implantpb.Timer, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Suicide(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Suicide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ListModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) LoadModule(ctx context.Context, in *implantpb.LoadModule, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/LoadModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RefreshModule(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/RefreshModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListAddon(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ListAddon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) LoadAddon(ctx context.Context, in *implantpb.LoadAddon, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/LoadAddon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteAddon(ctx context.Context, in *implantpb.ExecuteAddon, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteAddon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Clear(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) CancelTask(ctx context.Context, in *implantpb.ImplantTask, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Upload(ctx context.Context, in *implantpb.UploadRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Download(ctx context.Context, in *implantpb.DownloadRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Sync(ctx context.Context, in *clientpb.Sync, opts ...grpc.CallOption) (*clientpb.SyncResp, error) {
	out := new(clientpb.SyncResp)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Pwd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Pwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Ls(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Ls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Cd(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Cd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Rm(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Rm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Mv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Mv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Cp(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Cp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Cat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Cat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Mkdir(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Chmod(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Chmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Chown(ctx context.Context, in *implantpb.ChownRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Chown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Kill(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Ps(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Ps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Netstat(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Netstat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Curl(ctx context.Context, in *implantpb.CurlRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Curl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Env(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Env", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) SetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/SetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) UnsetEnv(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/UnsetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Whoami(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Whoami", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Info(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Bypass(ctx context.Context, in *implantpb.BypassRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Bypass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegQuery(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/RegQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegAdd(ctx context.Context, in *implantpb.RegistryWriteRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/RegAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegDelete(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/RegDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegListKey(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/RegListKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) RegListValue(ctx context.Context, in *implantpb.RegistryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/RegListValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceCreate(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ServiceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceStart(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ServiceStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceStop(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ServiceStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceQuery(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ServiceQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ServiceDelete(ctx context.Context, in *implantpb.ServiceRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ServiceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdList(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdCreate(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdStart(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdStop(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdDelete(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdQuery(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) TaskSchdRun(ctx context.Context, in *implantpb.TaskScheduleRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/TaskSchdRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WmiQuery(ctx context.Context, in *implantpb.WmiQueryRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WmiQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WmiExecute(ctx context.Context, in *implantpb.WmiMethodRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WmiExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Runas(ctx context.Context, in *implantpb.RunAsRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Runas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Privs(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Privs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetSystem(ctx context.Context, in *implantpb.Request, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Execute(ctx context.Context, in *implantpb.ExecRequest, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteSpawn(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteSpawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteAssembly(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteAssembly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecutePowerpick(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecutePowerpick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteEXE(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteEXE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteDLL(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteDLL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteArmory(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteArmory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteShellcode(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteShellcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteBof(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteBof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ExecuteLocal(ctx context.Context, in *implantpb.ExecuteBinary, opts ...grpc.CallOption) (*clientpb.Task, error) {
	out := new(clientpb.Task)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ExecuteLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) EXE2Shellcode(ctx context.Context, in *clientpb.EXE2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error) {
	out := new(clientpb.Bin)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/EXE2Shellcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) DLL2Shellcode(ctx context.Context, in *clientpb.DLL2Shellcode, opts ...grpc.CallOption) (*clientpb.Bin, error) {
	out := new(clientpb.Bin)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/DLL2Shellcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ShellcodeEncode(ctx context.Context, in *clientpb.ShellcodeEncode, opts ...grpc.CallOption) (*clientpb.Bin, error) {
	out := new(clientpb.Bin)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ShellcodeEncode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) ListJobs(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*lispb.Pipelines, error) {
	out := new(lispb.Pipelines)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Websites(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*lispb.Websites, error) {
	out := new(lispb.Websites)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Websites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Website(ctx context.Context, in *lispb.Website, opts ...grpc.CallOption) (*lispb.Website, error) {
	out := new(lispb.Website)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Website", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteRemove(ctx context.Context, in *lispb.Website, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WebsiteRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteAddContent(ctx context.Context, in *lispb.WebsiteAddContent, opts ...grpc.CallOption) (*lispb.Website, error) {
	out := new(lispb.Website)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WebsiteAddContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteUpdateContent(ctx context.Context, in *lispb.WebsiteAddContent, opts ...grpc.CallOption) (*lispb.Website, error) {
	out := new(lispb.Website)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WebsiteUpdateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) WebsiteRemoveContent(ctx context.Context, in *lispb.WebsiteRemoveContent, opts ...grpc.CallOption) (*lispb.Website, error) {
	out := new(lispb.Website)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/WebsiteRemoveContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) NewProfile(ctx context.Context, in *clientpb.Profile, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/NewProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetProfiles(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Profiles, error) {
	out := new(clientpb.Profiles)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) Generate(ctx context.Context, in *clientpb.Generate, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) DownloadOutput(ctx context.Context, in *clientpb.Sync, opts ...grpc.CallOption) (*clientpb.SyncResp, error) {
	out := new(clientpb.SyncResp)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/DownloadOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maliceRPCClient) GetBuilders(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error) {
	out := new(clientpb.Builders)
	err := c.cc.Invoke(ctx, "/clientrpc.MaliceRPC/GetBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaliceRPCServer is the server API for MaliceRPC service.
// All implementations must embed UnimplementedMaliceRPCServer
// for forward compatibility
type MaliceRPCServer interface {
	// basic
	LoginClient(context.Context, *clientpb.LoginReq) (*clientpb.Client, error)
	GetBasic(context.Context, *clientpb.Empty) (*clientpb.Basic, error)
	GetClients(context.Context, *clientpb.Empty) (*clientpb.Clients, error)
	GetSessions(context.Context, *clientpb.Empty) (*clientpb.Sessions, error)
	GetAlivedSessions(context.Context, *clientpb.Empty) (*clientpb.Sessions, error)
	GetSession(context.Context, *clientpb.SessionRequest) (*clientpb.Session, error)
	GetSessionLog(context.Context, *clientpb.SessionLog) (*clientpb.TasksContext, error)
	BasicSessionOP(context.Context, *clientpb.BasicUpdateSession) (*clientpb.Empty, error)
	GetListeners(context.Context, *clientpb.Empty) (*clientpb.Listeners, error)
	GetPipelines(context.Context, *clientpb.Empty) (*lispb.Pipelines, error)
	GetJobs(context.Context, *clientpb.Empty) (*clientpb.Jobs, error)
	GetTasks(context.Context, *clientpb.Session) (*clientpb.Tasks, error)
	GetTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error)
	GetTaskFiles(context.Context, *clientpb.Session) (*clientpb.Files, error)
	WaitTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error)
	WaitTaskFinish(context.Context, *clientpb.Task) (*clientpb.TaskContext, error)
	GetAllTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContexts, error)
	GetFiles(context.Context, *clientpb.Session) (*clientpb.Files, error)
	// event
	Events(*clientpb.Empty, MaliceRPC_EventsServer) error
	Broadcast(context.Context, *clientpb.Event) (*clientpb.Empty, error)
	Notify(context.Context, *clientpb.Event) (*clientpb.Empty, error)
	SessionEvent(context.Context, *clientpb.Event) (*clientpb.Empty, error)
	// implant::internal
	Sleep(context.Context, *implantpb.Timer) (*clientpb.Task, error)
	Suicide(context.Context, *implantpb.Request) (*clientpb.Task, error)
	ListModule(context.Context, *implantpb.Request) (*clientpb.Task, error)
	LoadModule(context.Context, *implantpb.LoadModule) (*clientpb.Task, error)
	RefreshModule(context.Context, *implantpb.Request) (*clientpb.Task, error)
	ListAddon(context.Context, *implantpb.Request) (*clientpb.Task, error)
	LoadAddon(context.Context, *implantpb.LoadAddon) (*clientpb.Task, error)
	ExecuteAddon(context.Context, *implantpb.ExecuteAddon) (*clientpb.Task, error)
	Clear(context.Context, *implantpb.Request) (*clientpb.Task, error)
	CancelTask(context.Context, *implantpb.ImplantTask) (*clientpb.Task, error)
	// implant::file
	Upload(context.Context, *implantpb.UploadRequest) (*clientpb.Task, error)
	Download(context.Context, *implantpb.DownloadRequest) (*clientpb.Task, error)
	Sync(context.Context, *clientpb.Sync) (*clientpb.SyncResp, error)
	// implant::fs
	Pwd(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Ls(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Cd(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Rm(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Mv(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Cp(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Cat(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Mkdir(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Chmod(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Chown(context.Context, *implantpb.ChownRequest) (*clientpb.Task, error)
	// implant::sys
	Kill(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Ps(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Netstat(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Curl(context.Context, *implantpb.CurlRequest) (*clientpb.Task, error)
	Env(context.Context, *implantpb.Request) (*clientpb.Task, error)
	SetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error)
	UnsetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Whoami(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Info(context.Context, *implantpb.Request) (*clientpb.Task, error)
	Bypass(context.Context, *implantpb.BypassRequest) (*clientpb.Task, error)
	// implant::sys::reg
	RegQuery(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	RegAdd(context.Context, *implantpb.RegistryWriteRequest) (*clientpb.Task, error)
	RegDelete(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	RegListKey(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	RegListValue(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error)
	// implant::sys::service
	ServiceList(context.Context, *implantpb.Request) (*clientpb.Task, error)
	ServiceCreate(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceStart(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceStop(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceQuery(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	ServiceDelete(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error)
	// implant::sys::taskschd
	TaskSchdList(context.Context, *implantpb.Request) (*clientpb.Task, error)
	TaskSchdCreate(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdStart(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdStop(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdDelete(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdQuery(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	TaskSchdRun(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error)
	// implant::sys:wmi
	WmiQuery(context.Context, *implantpb.WmiQueryRequest) (*clientpb.Task, error)
	WmiExecute(context.Context, *implantpb.WmiMethodRequest) (*clientpb.Task, error)
	// implant::sys:token
	Runas(context.Context, *implantpb.RunAsRequest) (*clientpb.Task, error)
	Privs(context.Context, *implantpb.Request) (*clientpb.Task, error)
	GetSystem(context.Context, *implantpb.Request) (*clientpb.Task, error)
	// implant:execute
	Execute(context.Context, *implantpb.ExecRequest) (*clientpb.Task, error)
	ExecuteSpawn(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteAssembly(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecutePowerpick(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteEXE(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteDLL(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteArmory(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteShellcode(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteBof(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	ExecuteLocal(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error)
	// shellcode
	EXE2Shellcode(context.Context, *clientpb.EXE2Shellcode) (*clientpb.Bin, error)
	DLL2Shellcode(context.Context, *clientpb.DLL2Shellcode) (*clientpb.Bin, error)
	ShellcodeEncode(context.Context, *clientpb.ShellcodeEncode) (*clientpb.Bin, error)
	// jobs
	ListJobs(context.Context, *clientpb.Empty) (*lispb.Pipelines, error)
	// Websites
	Websites(context.Context, *clientpb.Empty) (*lispb.Websites, error)
	Website(context.Context, *lispb.Website) (*lispb.Website, error)
	WebsiteRemove(context.Context, *lispb.Website) (*clientpb.Empty, error)
	WebsiteAddContent(context.Context, *lispb.WebsiteAddContent) (*lispb.Website, error)
	WebsiteUpdateContent(context.Context, *lispb.WebsiteAddContent) (*lispb.Website, error)
	WebsiteRemoveContent(context.Context, *lispb.WebsiteRemoveContent) (*lispb.Website, error)
	// generator
	NewProfile(context.Context, *clientpb.Profile) (*clientpb.Empty, error)
	GetProfiles(context.Context, *clientpb.Empty) (*clientpb.Profiles, error)
	Generate(context.Context, *clientpb.Generate) (*clientpb.Empty, error)
	DownloadOutput(context.Context, *clientpb.Sync) (*clientpb.SyncResp, error)
	GetBuilders(context.Context, *clientpb.Empty) (*clientpb.Builders, error)
	mustEmbedUnimplementedMaliceRPCServer()
}

// UnimplementedMaliceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMaliceRPCServer struct {
}

func (UnimplementedMaliceRPCServer) LoginClient(context.Context, *clientpb.LoginReq) (*clientpb.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginClient not implemented")
}
func (UnimplementedMaliceRPCServer) GetBasic(context.Context, *clientpb.Empty) (*clientpb.Basic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasic not implemented")
}
func (UnimplementedMaliceRPCServer) GetClients(context.Context, *clientpb.Empty) (*clientpb.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedMaliceRPCServer) GetSessions(context.Context, *clientpb.Empty) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedMaliceRPCServer) GetAlivedSessions(context.Context, *clientpb.Empty) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlivedSessions not implemented")
}
func (UnimplementedMaliceRPCServer) GetSession(context.Context, *clientpb.SessionRequest) (*clientpb.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedMaliceRPCServer) GetSessionLog(context.Context, *clientpb.SessionLog) (*clientpb.TasksContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionLog not implemented")
}
func (UnimplementedMaliceRPCServer) BasicSessionOP(context.Context, *clientpb.BasicUpdateSession) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicSessionOP not implemented")
}
func (UnimplementedMaliceRPCServer) GetListeners(context.Context, *clientpb.Empty) (*clientpb.Listeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeners not implemented")
}
func (UnimplementedMaliceRPCServer) GetPipelines(context.Context, *clientpb.Empty) (*lispb.Pipelines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelines not implemented")
}
func (UnimplementedMaliceRPCServer) GetJobs(context.Context, *clientpb.Empty) (*clientpb.Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedMaliceRPCServer) GetTasks(context.Context, *clientpb.Session) (*clientpb.Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedMaliceRPCServer) GetTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskContent not implemented")
}
func (UnimplementedMaliceRPCServer) GetTaskFiles(context.Context, *clientpb.Session) (*clientpb.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskFiles not implemented")
}
func (UnimplementedMaliceRPCServer) WaitTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitTaskContent not implemented")
}
func (UnimplementedMaliceRPCServer) WaitTaskFinish(context.Context, *clientpb.Task) (*clientpb.TaskContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitTaskFinish not implemented")
}
func (UnimplementedMaliceRPCServer) GetAllTaskContent(context.Context, *clientpb.Task) (*clientpb.TaskContexts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTaskContent not implemented")
}
func (UnimplementedMaliceRPCServer) GetFiles(context.Context, *clientpb.Session) (*clientpb.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedMaliceRPCServer) Events(*clientpb.Empty, MaliceRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedMaliceRPCServer) Broadcast(context.Context, *clientpb.Event) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedMaliceRPCServer) Notify(context.Context, *clientpb.Event) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedMaliceRPCServer) SessionEvent(context.Context, *clientpb.Event) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionEvent not implemented")
}
func (UnimplementedMaliceRPCServer) Sleep(context.Context, *implantpb.Timer) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedMaliceRPCServer) Suicide(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suicide not implemented")
}
func (UnimplementedMaliceRPCServer) ListModule(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModule not implemented")
}
func (UnimplementedMaliceRPCServer) LoadModule(context.Context, *implantpb.LoadModule) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModule not implemented")
}
func (UnimplementedMaliceRPCServer) RefreshModule(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshModule not implemented")
}
func (UnimplementedMaliceRPCServer) ListAddon(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddon not implemented")
}
func (UnimplementedMaliceRPCServer) LoadAddon(context.Context, *implantpb.LoadAddon) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAddon not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteAddon(context.Context, *implantpb.ExecuteAddon) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAddon not implemented")
}
func (UnimplementedMaliceRPCServer) Clear(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedMaliceRPCServer) CancelTask(context.Context, *implantpb.ImplantTask) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedMaliceRPCServer) Upload(context.Context, *implantpb.UploadRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMaliceRPCServer) Download(context.Context, *implantpb.DownloadRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMaliceRPCServer) Sync(context.Context, *clientpb.Sync) (*clientpb.SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedMaliceRPCServer) Pwd(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pwd not implemented")
}
func (UnimplementedMaliceRPCServer) Ls(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (UnimplementedMaliceRPCServer) Cd(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cd not implemented")
}
func (UnimplementedMaliceRPCServer) Rm(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rm not implemented")
}
func (UnimplementedMaliceRPCServer) Mv(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mv not implemented")
}
func (UnimplementedMaliceRPCServer) Cp(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cp not implemented")
}
func (UnimplementedMaliceRPCServer) Cat(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cat not implemented")
}
func (UnimplementedMaliceRPCServer) Mkdir(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedMaliceRPCServer) Chmod(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedMaliceRPCServer) Chown(context.Context, *implantpb.ChownRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedMaliceRPCServer) Kill(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedMaliceRPCServer) Ps(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ps not implemented")
}
func (UnimplementedMaliceRPCServer) Netstat(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Netstat not implemented")
}
func (UnimplementedMaliceRPCServer) Curl(context.Context, *implantpb.CurlRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Curl not implemented")
}
func (UnimplementedMaliceRPCServer) Env(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Env not implemented")
}
func (UnimplementedMaliceRPCServer) SetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedMaliceRPCServer) UnsetEnv(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetEnv not implemented")
}
func (UnimplementedMaliceRPCServer) Whoami(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedMaliceRPCServer) Info(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMaliceRPCServer) Bypass(context.Context, *implantpb.BypassRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bypass not implemented")
}
func (UnimplementedMaliceRPCServer) RegQuery(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegQuery not implemented")
}
func (UnimplementedMaliceRPCServer) RegAdd(context.Context, *implantpb.RegistryWriteRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegAdd not implemented")
}
func (UnimplementedMaliceRPCServer) RegDelete(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegDelete not implemented")
}
func (UnimplementedMaliceRPCServer) RegListKey(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegListKey not implemented")
}
func (UnimplementedMaliceRPCServer) RegListValue(context.Context, *implantpb.RegistryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegListValue not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceList(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceList not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceCreate(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCreate not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceStart(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStart not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceStop(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStop not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceQuery(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceQuery not implemented")
}
func (UnimplementedMaliceRPCServer) ServiceDelete(context.Context, *implantpb.ServiceRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelete not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdList(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdList not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdCreate(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdCreate not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdStart(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdStart not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdStop(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdStop not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdDelete(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdDelete not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdQuery(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdQuery not implemented")
}
func (UnimplementedMaliceRPCServer) TaskSchdRun(context.Context, *implantpb.TaskScheduleRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSchdRun not implemented")
}
func (UnimplementedMaliceRPCServer) WmiQuery(context.Context, *implantpb.WmiQueryRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WmiQuery not implemented")
}
func (UnimplementedMaliceRPCServer) WmiExecute(context.Context, *implantpb.WmiMethodRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WmiExecute not implemented")
}
func (UnimplementedMaliceRPCServer) Runas(context.Context, *implantpb.RunAsRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Runas not implemented")
}
func (UnimplementedMaliceRPCServer) Privs(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Privs not implemented")
}
func (UnimplementedMaliceRPCServer) GetSystem(context.Context, *implantpb.Request) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedMaliceRPCServer) Execute(context.Context, *implantpb.ExecRequest) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteSpawn(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSpawn not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteAssembly(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAssembly not implemented")
}
func (UnimplementedMaliceRPCServer) ExecutePowerpick(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePowerpick not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteEXE(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEXE not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteDLL(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDLL not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteArmory(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteArmory not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteShellcode(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteShellcode not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteBof(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBof not implemented")
}
func (UnimplementedMaliceRPCServer) ExecuteLocal(context.Context, *implantpb.ExecuteBinary) (*clientpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteLocal not implemented")
}
func (UnimplementedMaliceRPCServer) EXE2Shellcode(context.Context, *clientpb.EXE2Shellcode) (*clientpb.Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXE2Shellcode not implemented")
}
func (UnimplementedMaliceRPCServer) DLL2Shellcode(context.Context, *clientpb.DLL2Shellcode) (*clientpb.Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DLL2Shellcode not implemented")
}
func (UnimplementedMaliceRPCServer) ShellcodeEncode(context.Context, *clientpb.ShellcodeEncode) (*clientpb.Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeEncode not implemented")
}
func (UnimplementedMaliceRPCServer) ListJobs(context.Context, *clientpb.Empty) (*lispb.Pipelines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedMaliceRPCServer) Websites(context.Context, *clientpb.Empty) (*lispb.Websites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedMaliceRPCServer) Website(context.Context, *lispb.Website) (*lispb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteRemove(context.Context, *lispb.Website) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemove not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteAddContent(context.Context, *lispb.WebsiteAddContent) (*lispb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteAddContent not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteUpdateContent(context.Context, *lispb.WebsiteAddContent) (*lispb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteUpdateContent not implemented")
}
func (UnimplementedMaliceRPCServer) WebsiteRemoveContent(context.Context, *lispb.WebsiteRemoveContent) (*lispb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemoveContent not implemented")
}
func (UnimplementedMaliceRPCServer) NewProfile(context.Context, *clientpb.Profile) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProfile not implemented")
}
func (UnimplementedMaliceRPCServer) GetProfiles(context.Context, *clientpb.Empty) (*clientpb.Profiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}
func (UnimplementedMaliceRPCServer) Generate(context.Context, *clientpb.Generate) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedMaliceRPCServer) DownloadOutput(context.Context, *clientpb.Sync) (*clientpb.SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadOutput not implemented")
}
func (UnimplementedMaliceRPCServer) GetBuilders(context.Context, *clientpb.Empty) (*clientpb.Builders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuilders not implemented")
}
func (UnimplementedMaliceRPCServer) mustEmbedUnimplementedMaliceRPCServer() {}

// UnsafeMaliceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaliceRPCServer will
// result in compilation errors.
type UnsafeMaliceRPCServer interface {
	mustEmbedUnimplementedMaliceRPCServer()
}

func RegisterMaliceRPCServer(s grpc.ServiceRegistrar, srv MaliceRPCServer) {
	s.RegisterService(&MaliceRPC_ServiceDesc, srv)
}

func _MaliceRPC_LoginClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).LoginClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/LoginClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).LoginClient(ctx, req.(*clientpb.LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetBasic(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetClients(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSessions(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetAlivedSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetAlivedSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetAlivedSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetAlivedSessions(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSession(ctx, req.(*clientpb.SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSessionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSessionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetSessionLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSessionLog(ctx, req.(*clientpb.SessionLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_BasicSessionOP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BasicUpdateSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).BasicSessionOP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/BasicSessionOP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).BasicSessionOP(ctx, req.(*clientpb.BasicUpdateSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetListeners(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetPipelines(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetJobs(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetTasks(ctx, req.(*clientpb.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetTaskContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetTaskContent(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetTaskFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetTaskFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetTaskFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetTaskFiles(ctx, req.(*clientpb.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WaitTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WaitTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WaitTaskContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WaitTaskContent(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WaitTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WaitTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WaitTaskFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WaitTaskFinish(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetAllTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetAllTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetAllTaskContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetAllTaskContent(ctx, req.(*clientpb.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetFiles(ctx, req.(*clientpb.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaliceRPCServer).Events(m, &maliceRPCEventsServer{stream})
}

type MaliceRPC_EventsServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type maliceRPCEventsServer struct {
	grpc.ServerStream
}

func (x *maliceRPCEventsServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _MaliceRPC_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Broadcast(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Notify(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_SessionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).SessionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/SessionEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).SessionEvent(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Timer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Sleep(ctx, req.(*implantpb.Timer))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Suicide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Suicide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Suicide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Suicide(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ListModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListModule(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_LoadModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.LoadModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).LoadModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/LoadModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).LoadModule(ctx, req.(*implantpb.LoadModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RefreshModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RefreshModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/RefreshModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RefreshModule(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ListAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListAddon(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_LoadAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.LoadAddon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).LoadAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/LoadAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).LoadAddon(ctx, req.(*implantpb.LoadAddon))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteAddon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteAddon(ctx, req.(*implantpb.ExecuteAddon))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Clear(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ImplantTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).CancelTask(ctx, req.(*implantpb.ImplantTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Upload(ctx, req.(*implantpb.UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Download(ctx, req.(*implantpb.DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Sync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Sync(ctx, req.(*clientpb.Sync))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Pwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Pwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Pwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Pwd(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Ls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Ls(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Cd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Cd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Cd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Cd(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Rm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Rm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Rm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Rm(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Mv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Mv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Mv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Mv(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Cp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Cp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Cp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Cp(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Cat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Cat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Cat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Cat(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Mkdir(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Chmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Chmod(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Chown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Chown(ctx, req.(*implantpb.ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Kill(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Ps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Ps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Ps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Ps(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Netstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Netstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Netstat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Netstat(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Curl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.CurlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Curl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Curl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Curl(ctx, req.(*implantpb.CurlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Env_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Env(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Env",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Env(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/SetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).SetEnv(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_UnsetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).UnsetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/UnsetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).UnsetEnv(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Whoami",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Whoami(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Info(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Bypass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.BypassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Bypass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Bypass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Bypass(ctx, req.(*implantpb.BypassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/RegQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegQuery(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/RegAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegAdd(ctx, req.(*implantpb.RegistryWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/RegDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegDelete(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/RegListKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegListKey(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_RegListValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).RegListValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/RegListValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).RegListValue(ctx, req.(*implantpb.RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceList(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ServiceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceCreate(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ServiceStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceStart(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ServiceStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceStop(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ServiceQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceQuery(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ServiceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ServiceDelete(ctx, req.(*implantpb.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdList(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdCreate(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdStart(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdStop(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdDelete(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdQuery(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_TaskSchdRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.TaskScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).TaskSchdRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/TaskSchdRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).TaskSchdRun(ctx, req.(*implantpb.TaskScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WmiQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.WmiQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WmiQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WmiQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WmiQuery(ctx, req.(*implantpb.WmiQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WmiExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.WmiMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WmiExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WmiExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WmiExecute(ctx, req.(*implantpb.WmiMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Runas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.RunAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Runas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Runas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Runas(ctx, req.(*implantpb.RunAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Privs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Privs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Privs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Privs(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetSystem(ctx, req.(*implantpb.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Execute(ctx, req.(*implantpb.ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteSpawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteSpawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteSpawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteSpawn(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteAssembly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteAssembly(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecutePowerpick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecutePowerpick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecutePowerpick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecutePowerpick(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteEXE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteEXE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteEXE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteEXE(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteDLL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteDLL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteDLL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteDLL(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteArmory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteArmory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteArmory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteArmory(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteShellcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteShellcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteShellcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteShellcode(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteBof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteBof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteBof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteBof(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ExecuteLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(implantpb.ExecuteBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ExecuteLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ExecuteLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ExecuteLocal(ctx, req.(*implantpb.ExecuteBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_EXE2Shellcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.EXE2Shellcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).EXE2Shellcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/EXE2Shellcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).EXE2Shellcode(ctx, req.(*clientpb.EXE2Shellcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_DLL2Shellcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DLL2Shellcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).DLL2Shellcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/DLL2Shellcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).DLL2Shellcode(ctx, req.(*clientpb.DLL2Shellcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ShellcodeEncode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeEncode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ShellcodeEncode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ShellcodeEncode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ShellcodeEncode(ctx, req.(*clientpb.ShellcodeEncode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).ListJobs(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Websites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Websites(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lispb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Website",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Website(ctx, req.(*lispb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lispb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WebsiteRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteRemove(ctx, req.(*lispb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteAddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lispb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteAddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WebsiteAddContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteAddContent(ctx, req.(*lispb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteUpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lispb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteUpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WebsiteUpdateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteUpdateContent(ctx, req.(*lispb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_WebsiteRemoveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lispb.WebsiteRemoveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).WebsiteRemoveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/WebsiteRemoveContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).WebsiteRemoveContent(ctx, req.(*lispb.WebsiteRemoveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_NewProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).NewProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/NewProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).NewProfile(ctx, req.(*clientpb.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetProfiles(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Generate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).Generate(ctx, req.(*clientpb.Generate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_DownloadOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Sync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).DownloadOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/DownloadOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).DownloadOutput(ctx, req.(*clientpb.Sync))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaliceRPC_GetBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaliceRPCServer).GetBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.MaliceRPC/GetBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaliceRPCServer).GetBuilders(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MaliceRPC_ServiceDesc is the grpc.ServiceDesc for MaliceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaliceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientrpc.MaliceRPC",
	HandlerType: (*MaliceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginClient",
			Handler:    _MaliceRPC_LoginClient_Handler,
		},
		{
			MethodName: "GetBasic",
			Handler:    _MaliceRPC_GetBasic_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _MaliceRPC_GetClients_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _MaliceRPC_GetSessions_Handler,
		},
		{
			MethodName: "GetAlivedSessions",
			Handler:    _MaliceRPC_GetAlivedSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _MaliceRPC_GetSession_Handler,
		},
		{
			MethodName: "GetSessionLog",
			Handler:    _MaliceRPC_GetSessionLog_Handler,
		},
		{
			MethodName: "BasicSessionOP",
			Handler:    _MaliceRPC_BasicSessionOP_Handler,
		},
		{
			MethodName: "GetListeners",
			Handler:    _MaliceRPC_GetListeners_Handler,
		},
		{
			MethodName: "GetPipelines",
			Handler:    _MaliceRPC_GetPipelines_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _MaliceRPC_GetJobs_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _MaliceRPC_GetTasks_Handler,
		},
		{
			MethodName: "GetTaskContent",
			Handler:    _MaliceRPC_GetTaskContent_Handler,
		},
		{
			MethodName: "GetTaskFiles",
			Handler:    _MaliceRPC_GetTaskFiles_Handler,
		},
		{
			MethodName: "WaitTaskContent",
			Handler:    _MaliceRPC_WaitTaskContent_Handler,
		},
		{
			MethodName: "WaitTaskFinish",
			Handler:    _MaliceRPC_WaitTaskFinish_Handler,
		},
		{
			MethodName: "GetAllTaskContent",
			Handler:    _MaliceRPC_GetAllTaskContent_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _MaliceRPC_GetFiles_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _MaliceRPC_Broadcast_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _MaliceRPC_Notify_Handler,
		},
		{
			MethodName: "SessionEvent",
			Handler:    _MaliceRPC_SessionEvent_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _MaliceRPC_Sleep_Handler,
		},
		{
			MethodName: "Suicide",
			Handler:    _MaliceRPC_Suicide_Handler,
		},
		{
			MethodName: "ListModule",
			Handler:    _MaliceRPC_ListModule_Handler,
		},
		{
			MethodName: "LoadModule",
			Handler:    _MaliceRPC_LoadModule_Handler,
		},
		{
			MethodName: "RefreshModule",
			Handler:    _MaliceRPC_RefreshModule_Handler,
		},
		{
			MethodName: "ListAddon",
			Handler:    _MaliceRPC_ListAddon_Handler,
		},
		{
			MethodName: "LoadAddon",
			Handler:    _MaliceRPC_LoadAddon_Handler,
		},
		{
			MethodName: "ExecuteAddon",
			Handler:    _MaliceRPC_ExecuteAddon_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _MaliceRPC_Clear_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _MaliceRPC_CancelTask_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _MaliceRPC_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _MaliceRPC_Download_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _MaliceRPC_Sync_Handler,
		},
		{
			MethodName: "Pwd",
			Handler:    _MaliceRPC_Pwd_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _MaliceRPC_Ls_Handler,
		},
		{
			MethodName: "Cd",
			Handler:    _MaliceRPC_Cd_Handler,
		},
		{
			MethodName: "Rm",
			Handler:    _MaliceRPC_Rm_Handler,
		},
		{
			MethodName: "Mv",
			Handler:    _MaliceRPC_Mv_Handler,
		},
		{
			MethodName: "Cp",
			Handler:    _MaliceRPC_Cp_Handler,
		},
		{
			MethodName: "Cat",
			Handler:    _MaliceRPC_Cat_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _MaliceRPC_Mkdir_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _MaliceRPC_Chmod_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _MaliceRPC_Chown_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _MaliceRPC_Kill_Handler,
		},
		{
			MethodName: "Ps",
			Handler:    _MaliceRPC_Ps_Handler,
		},
		{
			MethodName: "Netstat",
			Handler:    _MaliceRPC_Netstat_Handler,
		},
		{
			MethodName: "Curl",
			Handler:    _MaliceRPC_Curl_Handler,
		},
		{
			MethodName: "Env",
			Handler:    _MaliceRPC_Env_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _MaliceRPC_SetEnv_Handler,
		},
		{
			MethodName: "UnsetEnv",
			Handler:    _MaliceRPC_UnsetEnv_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _MaliceRPC_Whoami_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _MaliceRPC_Info_Handler,
		},
		{
			MethodName: "Bypass",
			Handler:    _MaliceRPC_Bypass_Handler,
		},
		{
			MethodName: "RegQuery",
			Handler:    _MaliceRPC_RegQuery_Handler,
		},
		{
			MethodName: "RegAdd",
			Handler:    _MaliceRPC_RegAdd_Handler,
		},
		{
			MethodName: "RegDelete",
			Handler:    _MaliceRPC_RegDelete_Handler,
		},
		{
			MethodName: "RegListKey",
			Handler:    _MaliceRPC_RegListKey_Handler,
		},
		{
			MethodName: "RegListValue",
			Handler:    _MaliceRPC_RegListValue_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _MaliceRPC_ServiceList_Handler,
		},
		{
			MethodName: "ServiceCreate",
			Handler:    _MaliceRPC_ServiceCreate_Handler,
		},
		{
			MethodName: "ServiceStart",
			Handler:    _MaliceRPC_ServiceStart_Handler,
		},
		{
			MethodName: "ServiceStop",
			Handler:    _MaliceRPC_ServiceStop_Handler,
		},
		{
			MethodName: "ServiceQuery",
			Handler:    _MaliceRPC_ServiceQuery_Handler,
		},
		{
			MethodName: "ServiceDelete",
			Handler:    _MaliceRPC_ServiceDelete_Handler,
		},
		{
			MethodName: "TaskSchdList",
			Handler:    _MaliceRPC_TaskSchdList_Handler,
		},
		{
			MethodName: "TaskSchdCreate",
			Handler:    _MaliceRPC_TaskSchdCreate_Handler,
		},
		{
			MethodName: "TaskSchdStart",
			Handler:    _MaliceRPC_TaskSchdStart_Handler,
		},
		{
			MethodName: "TaskSchdStop",
			Handler:    _MaliceRPC_TaskSchdStop_Handler,
		},
		{
			MethodName: "TaskSchdDelete",
			Handler:    _MaliceRPC_TaskSchdDelete_Handler,
		},
		{
			MethodName: "TaskSchdQuery",
			Handler:    _MaliceRPC_TaskSchdQuery_Handler,
		},
		{
			MethodName: "TaskSchdRun",
			Handler:    _MaliceRPC_TaskSchdRun_Handler,
		},
		{
			MethodName: "WmiQuery",
			Handler:    _MaliceRPC_WmiQuery_Handler,
		},
		{
			MethodName: "WmiExecute",
			Handler:    _MaliceRPC_WmiExecute_Handler,
		},
		{
			MethodName: "Runas",
			Handler:    _MaliceRPC_Runas_Handler,
		},
		{
			MethodName: "Privs",
			Handler:    _MaliceRPC_Privs_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _MaliceRPC_GetSystem_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _MaliceRPC_Execute_Handler,
		},
		{
			MethodName: "ExecuteSpawn",
			Handler:    _MaliceRPC_ExecuteSpawn_Handler,
		},
		{
			MethodName: "ExecuteAssembly",
			Handler:    _MaliceRPC_ExecuteAssembly_Handler,
		},
		{
			MethodName: "ExecutePowerpick",
			Handler:    _MaliceRPC_ExecutePowerpick_Handler,
		},
		{
			MethodName: "ExecuteEXE",
			Handler:    _MaliceRPC_ExecuteEXE_Handler,
		},
		{
			MethodName: "ExecuteDLL",
			Handler:    _MaliceRPC_ExecuteDLL_Handler,
		},
		{
			MethodName: "ExecuteArmory",
			Handler:    _MaliceRPC_ExecuteArmory_Handler,
		},
		{
			MethodName: "ExecuteShellcode",
			Handler:    _MaliceRPC_ExecuteShellcode_Handler,
		},
		{
			MethodName: "ExecuteBof",
			Handler:    _MaliceRPC_ExecuteBof_Handler,
		},
		{
			MethodName: "ExecuteLocal",
			Handler:    _MaliceRPC_ExecuteLocal_Handler,
		},
		{
			MethodName: "EXE2Shellcode",
			Handler:    _MaliceRPC_EXE2Shellcode_Handler,
		},
		{
			MethodName: "DLL2Shellcode",
			Handler:    _MaliceRPC_DLL2Shellcode_Handler,
		},
		{
			MethodName: "ShellcodeEncode",
			Handler:    _MaliceRPC_ShellcodeEncode_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _MaliceRPC_ListJobs_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _MaliceRPC_Websites_Handler,
		},
		{
			MethodName: "Website",
			Handler:    _MaliceRPC_Website_Handler,
		},
		{
			MethodName: "WebsiteRemove",
			Handler:    _MaliceRPC_WebsiteRemove_Handler,
		},
		{
			MethodName: "WebsiteAddContent",
			Handler:    _MaliceRPC_WebsiteAddContent_Handler,
		},
		{
			MethodName: "WebsiteUpdateContent",
			Handler:    _MaliceRPC_WebsiteUpdateContent_Handler,
		},
		{
			MethodName: "WebsiteRemoveContent",
			Handler:    _MaliceRPC_WebsiteRemoveContent_Handler,
		},
		{
			MethodName: "NewProfile",
			Handler:    _MaliceRPC_NewProfile_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _MaliceRPC_GetProfiles_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _MaliceRPC_Generate_Handler,
		},
		{
			MethodName: "DownloadOutput",
			Handler:    _MaliceRPC_DownloadOutput_Handler,
		},
		{
			MethodName: "GetBuilders",
			Handler:    _MaliceRPC_GetBuilders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _MaliceRPC_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/clientrpc/service.proto",
}

// RootRPCClient is the client API for RootRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootRPCClient interface {
	// manager
	AddClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	RemoveClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	ListClients(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Clients, error)
	AddListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	RemoveListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error)
	ListListeners(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Listeners, error)
}

type rootRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRootRPCClient(cc grpc.ClientConnInterface) RootRPCClient {
	return &rootRPCClient{cc}
}

func (c *rootRPCClient) AddClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, "/clientrpc.RootRPC/AddClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) RemoveClient(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, "/clientrpc.RootRPC/RemoveClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) ListClients(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Clients, error) {
	out := new(clientpb.Clients)
	err := c.cc.Invoke(ctx, "/clientrpc.RootRPC/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) AddListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, "/clientrpc.RootRPC/AddListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) RemoveListener(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*rootpb.Response, error) {
	out := new(rootpb.Response)
	err := c.cc.Invoke(ctx, "/clientrpc.RootRPC/RemoveListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootRPCClient) ListListeners(ctx context.Context, in *rootpb.Operator, opts ...grpc.CallOption) (*clientpb.Listeners, error) {
	out := new(clientpb.Listeners)
	err := c.cc.Invoke(ctx, "/clientrpc.RootRPC/ListListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootRPCServer is the server API for RootRPC service.
// All implementations must embed UnimplementedRootRPCServer
// for forward compatibility
type RootRPCServer interface {
	// manager
	AddClient(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	RemoveClient(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	ListClients(context.Context, *rootpb.Operator) (*clientpb.Clients, error)
	AddListener(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	RemoveListener(context.Context, *rootpb.Operator) (*rootpb.Response, error)
	ListListeners(context.Context, *rootpb.Operator) (*clientpb.Listeners, error)
	mustEmbedUnimplementedRootRPCServer()
}

// UnimplementedRootRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRootRPCServer struct {
}

func (UnimplementedRootRPCServer) AddClient(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedRootRPCServer) RemoveClient(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClient not implemented")
}
func (UnimplementedRootRPCServer) ListClients(context.Context, *rootpb.Operator) (*clientpb.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedRootRPCServer) AddListener(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListener not implemented")
}
func (UnimplementedRootRPCServer) RemoveListener(context.Context, *rootpb.Operator) (*rootpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveListener not implemented")
}
func (UnimplementedRootRPCServer) ListListeners(context.Context, *rootpb.Operator) (*clientpb.Listeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListeners not implemented")
}
func (UnimplementedRootRPCServer) mustEmbedUnimplementedRootRPCServer() {}

// UnsafeRootRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootRPCServer will
// result in compilation errors.
type UnsafeRootRPCServer interface {
	mustEmbedUnimplementedRootRPCServer()
}

func RegisterRootRPCServer(s grpc.ServiceRegistrar, srv RootRPCServer) {
	s.RegisterService(&RootRPC_ServiceDesc, srv)
}

func _RootRPC_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.RootRPC/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).AddClient(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.RootRPC/RemoveClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).RemoveClient(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.RootRPC/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).ListClients(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_AddListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).AddListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.RootRPC/AddListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).AddListener(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_RemoveListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).RemoveListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.RootRPC/RemoveListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).RemoveListener(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootRPC_ListListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rootpb.Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootRPCServer).ListListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientrpc.RootRPC/ListListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootRPCServer).ListListeners(ctx, req.(*rootpb.Operator))
	}
	return interceptor(ctx, in, info, handler)
}

// RootRPC_ServiceDesc is the grpc.ServiceDesc for RootRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientrpc.RootRPC",
	HandlerType: (*RootRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _RootRPC_AddClient_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _RootRPC_RemoveClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _RootRPC_ListClients_Handler,
		},
		{
			MethodName: "AddListener",
			Handler:    _RootRPC_AddListener_Handler,
		},
		{
			MethodName: "RemoveListener",
			Handler:    _RootRPC_RemoveListener_Handler,
		},
		{
			MethodName: "ListListeners",
			Handler:    _RootRPC_ListListeners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/clientrpc/service.proto",
}
